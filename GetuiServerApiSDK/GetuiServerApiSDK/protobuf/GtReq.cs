// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.gexin.rp.sdk.dto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GtReq {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_GtAuth__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.GtAuth, global::com.gexin.rp.sdk.dto.GtAuth.Builder> internal__static_com_gexin_rp_sdk_dto_GtAuth__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_GtAuthResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.GtAuthResult, global::com.gexin.rp.sdk.dto.GtAuthResult.Builder> internal__static_com_gexin_rp_sdk_dto_GtAuthResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_ReqServList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ReqServList, global::com.gexin.rp.sdk.dto.ReqServList.Builder> internal__static_com_gexin_rp_sdk_dto_ReqServList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_ReqServListResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ReqServListResult, global::com.gexin.rp.sdk.dto.ReqServListResult.Builder> internal__static_com_gexin_rp_sdk_dto_ReqServListResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushListResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushListResult, global::com.gexin.rp.sdk.dto.PushListResult.Builder> internal__static_com_gexin_rp_sdk_dto_PushListResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushResult, global::com.gexin.rp.sdk.dto.PushResult.Builder> internal__static_com_gexin_rp_sdk_dto_PushResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushOSSingleMessage, global::com.gexin.rp.sdk.dto.PushOSSingleMessage.Builder> internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushMMPSingleMessage, global::com.gexin.rp.sdk.dto.PushMMPSingleMessage.Builder> internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.StartMMPBatchTask, global::com.gexin.rp.sdk.dto.StartMMPBatchTask.Builder> internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.StartOSBatchTask, global::com.gexin.rp.sdk.dto.StartOSBatchTask.Builder> internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushListMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushListMessage, global::com.gexin.rp.sdk.dto.PushListMessage.Builder> internal__static_com_gexin_rp_sdk_dto_PushListMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_EndBatchTask__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.EndBatchTask, global::com.gexin.rp.sdk.dto.EndBatchTask.Builder> internal__static_com_gexin_rp_sdk_dto_EndBatchTask__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushMMPAppMessage, global::com.gexin.rp.sdk.dto.PushMMPAppMessage.Builder> internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_ServerNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ServerNotify, global::com.gexin.rp.sdk.dto.ServerNotify.Builder> internal__static_com_gexin_rp_sdk_dto_ServerNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ServerNotifyResult, global::com.gexin.rp.sdk.dto.ServerNotifyResult.Builder> internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_OSMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.OSMessage, global::com.gexin.rp.sdk.dto.OSMessage.Builder> internal__static_com_gexin_rp_sdk_dto_OSMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_MMPMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.MMPMessage, global::com.gexin.rp.sdk.dto.MMPMessage.Builder> internal__static_com_gexin_rp_sdk_dto_MMPMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_Transparent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.Transparent, global::com.gexin.rp.sdk.dto.Transparent.Builder> internal__static_com_gexin_rp_sdk_dto_Transparent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_PushInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushInfo, global::com.gexin.rp.sdk.dto.PushInfo.Builder> internal__static_com_gexin_rp_sdk_dto_PushInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_ActionChain__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ActionChain, global::com.gexin.rp.sdk.dto.ActionChain.Builder> internal__static_com_gexin_rp_sdk_dto_ActionChain__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_AppStartUp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.AppStartUp, global::com.gexin.rp.sdk.dto.AppStartUp.Builder> internal__static_com_gexin_rp_sdk_dto_AppStartUp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_Button__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.Button, global::com.gexin.rp.sdk.dto.Button.Builder> internal__static_com_gexin_rp_sdk_dto_Button__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_gexin_rp_sdk_dto_Target__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.Target, global::com.gexin.rp.sdk.dto.Target.Builder> internal__static_com_gexin_rp_sdk_dto_Target__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GtReq() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxndF9yZXEucHJvdG8SFGNvbS5nZXhpbi5ycC5zZGsuZHRvIkgKBkd0QXV0" + 
          "aBIMCgRzaWduGAEgAigJEg4KBmFwcGtleRgCIAIoCRIRCgl0aW1lc3RhbXAY" + 
          "AyACKAMSDQoFc2VxSWQYBCABKAki3AEKDEd0QXV0aFJlc3VsdBIMCgRjb2Rl" + 
          "GAEgAigFEhcKD3JlZGlyZWN0QWRkcmVzcxgCIAEoCRINCgVzZXFJZBgDIAEo" + 
          "CRIMCgRpbmZvGAQgASgJIocBChBHdEF1dGhSZXN1bHRDb2RlEg0KCXN1Y2Nl" + 
          "c3NlZBAAEhEKDWZhaWxlZF9ub1NpZ24QARITCg9mYWlsZWRfbm9BcHBrZXkQ" + 
          "AhIWChJmYWlsZWRfbm9UaW1lc3RhbXAQAxIWChJmYWlsZWRfQXV0aElsbGVn" + 
          "YWwQBBIMCghyZWRpcmVjdBAFIi8KC1JlcVNlcnZMaXN0Eg0KBXNlcUlkGAEg" + 
          "ASgJEhEKCXRpbWVzdGFtcBgDIAIoAyJ8ChFSZXFTZXJ2TGlzdFJlc3VsdBIM" + 
          "CgRjb2RlGAEgAigFEgwKBGhvc3QYAiADKAkSDQoFc2VxSWQYAyABKAkiPAoV" + 
          "UmVxU2Vydkhvc3RSZXN1bHRDb2RlEg0KCXN1Y2Nlc3NlZBAAEgoKBmZhaWxl" + 
          "ZBABEggKBGJ1c3kQAiJDCg5QdXNoTGlzdFJlc3VsdBIxCgdyZXN1bHRzGAEg" + 
          "AygLMiAuY29tLmdleGluLnJwLnNkay5kdG8uUHVzaFJlc3VsdCLCAgoKUHVz" + 
          "aFJlc3VsdBI8CgZyZXN1bHQYASACKA4yLC5jb20uZ2V4aW4ucnAuc2RrLmR0" + 
          "by5QdXNoUmVzdWx0LkVQdXNoUmVzdWx0Eg4KBnRhc2tJZBgCIAIoCRIRCglt" + 
          "ZXNzYWdlSWQYAyACKAkSDQoFc2VxSWQYBCACKAkSDgoGdGFyZ2V0GAUgAigJ" + 
          "EgwKBGluZm8YBiABKAkSDwoHdHJhY2VJZBgHIAEoCSKUAQoLRVB1c2hSZXN1" + 
          "bHQSFAoQc3VjY2Vzc2VkX29ubGluZRAAEhUKEXN1Y2Nlc3NlZF9vZmZsaW5l" + 
          "EAESFAoQc3VjY2Vzc2VkX2lnbm9yZRACEgoKBmZhaWxlZBADEggKBGJ1c3kQ" + 
          "BBIWChJzdWNjZXNzX3N0YXJ0QmF0Y2gQBRIUChBzdWNjZXNzX2VuZEJhdGNo" + 
          "EAYihAEKE1B1c2hPU1NpbmdsZU1lc3NhZ2USDQoFc2VxSWQYASACKAkSMAoH" + 
          "bWVzc2FnZRgCIAIoCzIfLmNvbS5nZXhpbi5ycC5zZGsuZHRvLk9TTWVzc2Fn" + 
          "ZRIsCgZ0YXJnZXQYAyACKAsyHC5jb20uZ2V4aW4ucnAuc2RrLmR0by5UYXJn" + 
          "ZXQihgEKFFB1c2hNTVBTaW5nbGVNZXNzYWdlEg0KBXNlcUlkGAEgAigJEjEK" + 
          "B21lc3NhZ2UYAiACKAsyIC5jb20uZ2V4aW4ucnAuc2RrLmR0by5NTVBNZXNz" + 
          "YWdlEiwKBnRhcmdldBgDIAIoCzIcLmNvbS5nZXhpbi5ycC5zZGsuZHRvLlRh" + 
          "cmdldCJpChFTdGFydE1NUEJhdGNoVGFzaxIxCgdtZXNzYWdlGAEgAigLMiAu" + 
          "Y29tLmdleGluLnJwLnNkay5kdG8uTU1QTWVzc2FnZRISCgZleHBpcmUYAiAC" + 
          "KAM6AjcyEg0KBXNlcUlkGAMgASgJIlgKEFN0YXJ0T1NCYXRjaFRhc2sSMAoH" + 
          "bWVzc2FnZRgBIAIoCzIfLmNvbS5nZXhpbi5ycC5zZGsuZHRvLk9TTWVzc2Fn" + 
          "ZRISCgZleHBpcmUYAiACKAM6AjcyIl8KD1B1c2hMaXN0TWVzc2FnZRINCgVz" + 
          "ZXFJZBgBIAIoCRIOCgZ0YXNrSWQYAiACKAkSLQoHdGFyZ2V0cxgDIAMoCzIc" + 
          "LmNvbS5nZXhpbi5ycC5zZGsuZHRvLlRhcmdldCItCgxFbmRCYXRjaFRhc2sS" + 
          "DgoGdGFza0lkGAEgAigJEg0KBXNlcUlkGAIgASgJIpUBChFQdXNoTU1QQXBw" + 
          "TWVzc2FnZRIxCgdtZXNzYWdlGAEgAigLMiAuY29tLmdleGluLnJwLnNkay5k" + 
          "dG8uTU1QTWVzc2FnZRIRCglhcHBJZExpc3QYAiADKAkSFQoNcGhvbmVUeXBl" + 
          "TGlzdBgDIAMoCRIUCgxwcm92aW5jZUxpc3QYBCADKAkSDQoFc2VxSWQYBSAB" + 
          "KAkiuwEKDFNlcnZlck5vdGlmeRI7CgR0eXBlGAEgAigOMi0uY29tLmdleGlu" + 
          "LnJwLnNkay5kdG8uU2VydmVyTm90aWZ5Lk5vdGlmeVR5cGUSDAoEaW5mbxgC" + 
          "IAEoCRIRCglleHRyYWRhdGEYAyABKAwSDQoFc2VxSWQYBCABKAkiPgoKTm90" + 
          "aWZ5VHlwZRIKCgZub3JtYWwQABIVChFzZXJ2ZXJMaXN0Q2hhbmdlZBABEg0K" + 
          "CWV4Y2VwdGlvbhACIjEKElNlcnZlck5vdGlmeVJlc3VsdBINCgVzZXFJZBgB" + 
          "IAIoCRIMCgRpbmZvGAIgASgJIsABCglPU01lc3NhZ2USEQoJaXNPZmZsaW5l" + 
          "GAIgAigIEhwKEW9mZmxpbmVFeHBpcmVUaW1lGAMgAigDOgExEjYKC3RyYW5z" + 
          "cGFyZW50GAQgASgLMiEuY29tLmdleGluLnJwLnNkay5kdG8uVHJhbnNwYXJl" + 
          "bnQSEQoJZXh0cmFEYXRhGAUgASgJEg8KB21zZ1R5cGUYBiABKAUSFAoMbXNn" + 
          "VHJhY2VGbGFnGAcgASgFEhAKCHByaW9yaXR5GAggASgFIsMBCgpNTVBNZXNz" + 
          "YWdlEjYKC3RyYW5zcGFyZW50GAIgASgLMiEuY29tLmdleGluLnJwLnNkay5k" + 
          "dG8uVHJhbnNwYXJlbnQSEQoJZXh0cmFEYXRhGAMgASgJEg8KB21zZ1R5cGUY" + 
          "BCABKAUSFAoMbXNnVHJhY2VGbGFnGAUgASgFEhgKEG1zZ09mZmxpbmVFeHBp" + 
          "cmUYBiABKAMSFwoJaXNPZmZsaW5lGAcgASgIOgR0cnVlEhAKCHByaW9yaXR5" + 
          "GAggASgFItUBCgtUcmFuc3BhcmVudBIKCgJpZBgBIAIoCRIOCgZhY3Rpb24Y" + 
          "AiACKAkSDgoGdGFza0lkGAMgAigJEg4KBmFwcEtleRgEIAIoCRINCgVhcHBJ" + 
          "ZBgFIAIoCRIRCgltZXNzYWdlSWQYBiACKAkSMAoIcHVzaEluZm8YByABKAsy" + 
          "Hi5jb20uZ2V4aW4ucnAuc2RrLmR0by5QdXNoSW5mbxI2CgthY3Rpb25DaGFp" + 
          "bhgIIAMoCzIhLmNvbS5nZXhpbi5ycC5zZGsuZHRvLkFjdGlvbkNoYWluIqkB" + 
          "CghQdXNoSW5mbxIPCgdtZXNzYWdlGAEgASgJEhEKCWFjdGlvbktleRgCIAEo" + 
          "CRINCgVzb3VuZBgDIAEoCRINCgViYWRnZRgEIAEoCRIPCgdwYXlsb2FkGAUg" + 
          "ASgJEg4KBmxvY0tleRgGIAEoCRIPCgdsb2NBcmdzGAcgASgJEhQKDGFjdGlv" + 
          "bkxvY0tleRgIIAEoCRITCgtsYXVuY2hJbWFnZRgJIAEoCSLYCQoLQWN0aW9u" + 
          "Q2hhaW4SEAoIYWN0aW9uSWQYASACKAUSNAoEdHlwZRgCIAIoDjImLmNvbS5n" + 
          "ZXhpbi5ycC5zZGsuZHRvLkFjdGlvbkNoYWluLlR5cGUSDAoEbmV4dBgDIAEo" + 
          "BRIMCgRsb2dvGGQgASgJEg8KB2xvZ29VUkwYZSABKAkSDQoFdGl0bGUYZiAB" + 
          "KAkSDAoEdGV4dBhnIAEoCRIRCgljbGVhcmFibGUYaCABKAgSDAoEcmluZxhp" + 
          "IAEoCBIMCgRidXp6GGogASgIEhEKCWJhbm5lclVSTBhrIAEoCRILCgNpbWcY" + 
          "eCABKAkSLQoHYnV0dG9ucxh5IAMoCzIcLmNvbS5nZXhpbi5ycC5zZGsuZHRv" + 
          "LkJ1dHRvbhIOCgVhcHBpZBiMASABKAkSNwoMYXBwc3RhcnR1cGlkGI0BIAEo" + 
          "CzIgLmNvbS5nZXhpbi5ycC5zZGsuZHRvLkFwcFN0YXJ0VXASEgoJYXV0b3N0" + 
          "YXJ0GI4BIAEoCBIVCgxmYWlsZWRBY3Rpb24YjwEgASgFEgwKA3VybBigASAB" + 
          "KAkSEAoHd2l0aGNpZBihASABKAkSHgoOaXNfd2l0aG5ldHR5cGUYogEgASgI" + 
          "OgVmYWxzZRIQCgdhZGRyZXNzGLQBIAEoCRIQCgdjb250ZW50GLUBIAEoCRIL" + 
          "CgJjdBi2ASABKAMSLgoEZmxhZxi3ASABKA4yHy5jb20uZ2V4aW4ucnAuc2Rr" + 
          "LmR0by5TTVNTdGF0dXMSGAoPc3VjY2Vzc2VkQWN0aW9uGMgBIAEoBRIaChF1" + 
          "bmluc3RhbGxlZEFjdGlvbhjJASABKAUSDQoEbmFtZRjcASABKAkSFAoLYXV0" + 
          "b0luc3RhbGwY3wEgASgIEhkKEHdpZmlBdXRvZG93bmxvYWQY4QEgASgIEhYK" + 
          "DWZvcmNlRG93bmxvYWQY4gEgASgIEhUKDHNob3dQcm9ncmVzcxjjASABKAgS" + 
          "DQoEcG9zdBjxASABKAkSEAoHaGVhZGVycxjyASABKAkSEgoJZ3JvdXBhYmxl" + 
          "GIQCIAEoCBIRCghtbXNUaXRsZRiYAiABKAkSDwoGbW1zVVJMGJkCIAEoCRIQ" + 
          "CgdwcmVsb2FkGKwCIAEoCBIPCgZ0YXNraWQYwAIgASgJEhEKCGR1cmF0aW9u" + 
          "GNQCIAEoAxINCgRkYXRlGOgCIAEoCSLgAgoEVHlwZRIICgRHb3RvEAASEAoM" + 
          "bm90aWZpY2F0aW9uEAESCQoFcG9wdXAQAhIMCghzdGFydGFwcBADEgwKCHN0" + 
          "YXJ0d2ViEAQSDAoIc21zaW5ib3gQBRIMCghjaGVja2FwcBAGEgcKA2VvYRAH" + 
          "Eg8KC2FwcGRvd25sb2FkEAgSDAoIc3RhcnRzbXMQCRINCglodHRwcHJveHkQ" + 
          "ChINCglzbXNpbmJveDIQCxINCgltbXNpbmJveDIQDBIMCghwb3B1cHdlYhAN" + 
          "EggKBGRpYWwQDhIRCg1yZXBvcnRiaW5kYXBwEA8SFgoScmVwb3J0YWRkcGhv" + 
          "bmVpbmZvEBASEQoNcmVwb3J0YXBwbGlzdBAREhEKDXRlcm1pbmF0ZXRhc2sQ" + 
          "EhINCglyZXBvcnRhcHAQExINCgllbmFibGVsb2cQFBIOCgpkaXNhYmxlbG9n" + 
          "EBUSDQoJdXBsb2FkbG9nEBYiOgoKQXBwU3RhcnRVcBIPCgdhbmRyb2lkGAEg" + 
          "ASgJEg4KBnN5bWJpYRgCIAEoCRILCgNpb3MYAyABKAkiJAoGQnV0dG9uEgwK" + 
          "BHRleHQYASABKAkSDAoEbmV4dBgCIAEoBSIpCgZUYXJnZXQSDQoFYXBwSWQY" + 
          "ASACKAkSEAoIY2xpZW50SWQYAiACKAkqyQIKBUNtZElEEg0KCUdUSEVBUkRC" + 
          "VBAAEgoKBkdUQVVUSBABEhEKDUdUQVVUSF9SRVNVTFQQAhIPCgtSRVFTRVJW" + 
          "SE9TVBADEhUKEVJFUVNFUlZIT1NUUkVTVUxUEAQSDgoKUFVTSFJFU1VMVBAF" + 
          "EhcKE1BVU0hPU1NJTkdMRU1FU1NBR0UQBhIYChRQVVNITU1QU0lOR0xFTUVT" + 
          "U0FHRRAHEhUKEVNUQVJUTU1QQkFUQ0hUQVNLEAgSFAoQU1RBUlRPU0JBVENI" + 
          "VEFTSxAJEhMKD1BVU0hMSVNUTUVTU0FHRRAKEhAKDEVOREJBVENIVEFTSxAL" + 
          "EhUKEVBVU0hNTVBBUFBNRVNTQUdFEAwSEAoMU0VSVkVSTk9USUZZEA0SEgoO" + 
          "UFVTSExJU1RSRVNVTFQQDhIWChJTRVJWRVJOT1RJRllSRVNVTFQQDyohCglT" + 
          "TVNTdGF0dXMSCgoGdW5yZWFkEAASCAoEcmVhZBABQgJIAQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_gexin_rp_sdk_dto_GtAuth__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_gexin_rp_sdk_dto_GtAuth__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.GtAuth, global::com.gexin.rp.sdk.dto.GtAuth.Builder>(internal__static_com_gexin_rp_sdk_dto_GtAuth__Descriptor,
                new string[] { "Sign", "Appkey", "Timestamp", "SeqId", });
        internal__static_com_gexin_rp_sdk_dto_GtAuthResult__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_gexin_rp_sdk_dto_GtAuthResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.GtAuthResult, global::com.gexin.rp.sdk.dto.GtAuthResult.Builder>(internal__static_com_gexin_rp_sdk_dto_GtAuthResult__Descriptor,
                new string[] { "Code", "RedirectAddress", "SeqId", "Info", });
        internal__static_com_gexin_rp_sdk_dto_ReqServList__Descriptor = Descriptor.MessageTypes[2];
        internal__static_com_gexin_rp_sdk_dto_ReqServList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ReqServList, global::com.gexin.rp.sdk.dto.ReqServList.Builder>(internal__static_com_gexin_rp_sdk_dto_ReqServList__Descriptor,
                new string[] { "SeqId", "Timestamp", });
        internal__static_com_gexin_rp_sdk_dto_ReqServListResult__Descriptor = Descriptor.MessageTypes[3];
        internal__static_com_gexin_rp_sdk_dto_ReqServListResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ReqServListResult, global::com.gexin.rp.sdk.dto.ReqServListResult.Builder>(internal__static_com_gexin_rp_sdk_dto_ReqServListResult__Descriptor,
                new string[] { "Code", "Host", "SeqId", });
        internal__static_com_gexin_rp_sdk_dto_PushListResult__Descriptor = Descriptor.MessageTypes[4];
        internal__static_com_gexin_rp_sdk_dto_PushListResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushListResult, global::com.gexin.rp.sdk.dto.PushListResult.Builder>(internal__static_com_gexin_rp_sdk_dto_PushListResult__Descriptor,
                new string[] { "Results", });
        internal__static_com_gexin_rp_sdk_dto_PushResult__Descriptor = Descriptor.MessageTypes[5];
        internal__static_com_gexin_rp_sdk_dto_PushResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushResult, global::com.gexin.rp.sdk.dto.PushResult.Builder>(internal__static_com_gexin_rp_sdk_dto_PushResult__Descriptor,
                new string[] { "Result", "TaskId", "MessageId", "SeqId", "Target", "Info", "TraceId", });
        internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__Descriptor = Descriptor.MessageTypes[6];
        internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushOSSingleMessage, global::com.gexin.rp.sdk.dto.PushOSSingleMessage.Builder>(internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__Descriptor,
                new string[] { "SeqId", "Message", "Target", });
        internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__Descriptor = Descriptor.MessageTypes[7];
        internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushMMPSingleMessage, global::com.gexin.rp.sdk.dto.PushMMPSingleMessage.Builder>(internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__Descriptor,
                new string[] { "SeqId", "Message", "Target", });
        internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__Descriptor = Descriptor.MessageTypes[8];
        internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.StartMMPBatchTask, global::com.gexin.rp.sdk.dto.StartMMPBatchTask.Builder>(internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__Descriptor,
                new string[] { "Message", "Expire", "SeqId", });
        internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__Descriptor = Descriptor.MessageTypes[9];
        internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.StartOSBatchTask, global::com.gexin.rp.sdk.dto.StartOSBatchTask.Builder>(internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__Descriptor,
                new string[] { "Message", "Expire", });
        internal__static_com_gexin_rp_sdk_dto_PushListMessage__Descriptor = Descriptor.MessageTypes[10];
        internal__static_com_gexin_rp_sdk_dto_PushListMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushListMessage, global::com.gexin.rp.sdk.dto.PushListMessage.Builder>(internal__static_com_gexin_rp_sdk_dto_PushListMessage__Descriptor,
                new string[] { "SeqId", "TaskId", "Targets", });
        internal__static_com_gexin_rp_sdk_dto_EndBatchTask__Descriptor = Descriptor.MessageTypes[11];
        internal__static_com_gexin_rp_sdk_dto_EndBatchTask__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.EndBatchTask, global::com.gexin.rp.sdk.dto.EndBatchTask.Builder>(internal__static_com_gexin_rp_sdk_dto_EndBatchTask__Descriptor,
                new string[] { "TaskId", "SeqId", });
        internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__Descriptor = Descriptor.MessageTypes[12];
        internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushMMPAppMessage, global::com.gexin.rp.sdk.dto.PushMMPAppMessage.Builder>(internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__Descriptor,
                new string[] { "Message", "AppIdList", "PhoneTypeList", "ProvinceList", "SeqId", });
        internal__static_com_gexin_rp_sdk_dto_ServerNotify__Descriptor = Descriptor.MessageTypes[13];
        internal__static_com_gexin_rp_sdk_dto_ServerNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ServerNotify, global::com.gexin.rp.sdk.dto.ServerNotify.Builder>(internal__static_com_gexin_rp_sdk_dto_ServerNotify__Descriptor,
                new string[] { "Type", "Info", "Extradata", "SeqId", });
        internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__Descriptor = Descriptor.MessageTypes[14];
        internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ServerNotifyResult, global::com.gexin.rp.sdk.dto.ServerNotifyResult.Builder>(internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__Descriptor,
                new string[] { "SeqId", "Info", });
        internal__static_com_gexin_rp_sdk_dto_OSMessage__Descriptor = Descriptor.MessageTypes[15];
        internal__static_com_gexin_rp_sdk_dto_OSMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.OSMessage, global::com.gexin.rp.sdk.dto.OSMessage.Builder>(internal__static_com_gexin_rp_sdk_dto_OSMessage__Descriptor,
                new string[] { "IsOffline", "OfflineExpireTime", "Transparent", "ExtraData", "MsgType", "MsgTraceFlag", "Priority", });
        internal__static_com_gexin_rp_sdk_dto_MMPMessage__Descriptor = Descriptor.MessageTypes[16];
        internal__static_com_gexin_rp_sdk_dto_MMPMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.MMPMessage, global::com.gexin.rp.sdk.dto.MMPMessage.Builder>(internal__static_com_gexin_rp_sdk_dto_MMPMessage__Descriptor,
                new string[] { "Transparent", "ExtraData", "MsgType", "MsgTraceFlag", "MsgOfflineExpire", "IsOffline", "Priority", });
        internal__static_com_gexin_rp_sdk_dto_Transparent__Descriptor = Descriptor.MessageTypes[17];
        internal__static_com_gexin_rp_sdk_dto_Transparent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.Transparent, global::com.gexin.rp.sdk.dto.Transparent.Builder>(internal__static_com_gexin_rp_sdk_dto_Transparent__Descriptor,
                new string[] { "Id", "Action", "TaskId", "AppKey", "AppId", "MessageId", "PushInfo", "ActionChain", });
        internal__static_com_gexin_rp_sdk_dto_PushInfo__Descriptor = Descriptor.MessageTypes[18];
        internal__static_com_gexin_rp_sdk_dto_PushInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.PushInfo, global::com.gexin.rp.sdk.dto.PushInfo.Builder>(internal__static_com_gexin_rp_sdk_dto_PushInfo__Descriptor,
                new string[] { "Message", "ActionKey", "Sound", "Badge", "Payload", "LocKey", "LocArgs", "ActionLocKey", "LaunchImage", });
        internal__static_com_gexin_rp_sdk_dto_ActionChain__Descriptor = Descriptor.MessageTypes[19];
        internal__static_com_gexin_rp_sdk_dto_ActionChain__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.ActionChain, global::com.gexin.rp.sdk.dto.ActionChain.Builder>(internal__static_com_gexin_rp_sdk_dto_ActionChain__Descriptor,
                new string[] { "ActionId", "Type", "Next", "Logo", "LogoURL", "Title", "Text", "Clearable", "Ring", "Buzz", "BannerURL", "Img", "Buttons", "Appid", "Appstartupid", "Autostart", "FailedAction", "Url", "Withcid", "IsWithnettype", "Address", "Content", "Ct", "Flag", "SuccessedAction", "UninstalledAction", "Name", "AutoInstall", "WifiAutodownload", "ForceDownload", "ShowProgress", "Post", "Headers", "Groupable", "MmsTitle", "MmsURL", "Preload", "Taskid", "Duration", "Date", });
        internal__static_com_gexin_rp_sdk_dto_AppStartUp__Descriptor = Descriptor.MessageTypes[20];
        internal__static_com_gexin_rp_sdk_dto_AppStartUp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.AppStartUp, global::com.gexin.rp.sdk.dto.AppStartUp.Builder>(internal__static_com_gexin_rp_sdk_dto_AppStartUp__Descriptor,
                new string[] { "Android", "Symbia", "Ios", });
        internal__static_com_gexin_rp_sdk_dto_Button__Descriptor = Descriptor.MessageTypes[21];
        internal__static_com_gexin_rp_sdk_dto_Button__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.Button, global::com.gexin.rp.sdk.dto.Button.Builder>(internal__static_com_gexin_rp_sdk_dto_Button__Descriptor,
                new string[] { "Text", "Next", });
        internal__static_com_gexin_rp_sdk_dto_Target__Descriptor = Descriptor.MessageTypes[22];
        internal__static_com_gexin_rp_sdk_dto_Target__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.gexin.rp.sdk.dto.Target, global::com.gexin.rp.sdk.dto.Target.Builder>(internal__static_com_gexin_rp_sdk_dto_Target__Descriptor,
                new string[] { "AppId", "ClientId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum CmdID {
    GTHEARDBT = 0,
    GTAUTH = 1,
    GTAUTH_RESULT = 2,
    REQSERVHOST = 3,
    REQSERVHOSTRESULT = 4,
    PUSHRESULT = 5,
    PUSHOSSINGLEMESSAGE = 6,
    PUSHMMPSINGLEMESSAGE = 7,
    STARTMMPBATCHTASK = 8,
    STARTOSBATCHTASK = 9,
    PUSHLISTMESSAGE = 10,
    ENDBATCHTASK = 11,
    PUSHMMPAPPMESSAGE = 12,
    SERVERNOTIFY = 13,
    PUSHLISTRESULT = 14,
    SERVERNOTIFYRESULT = 15,
  }
  
  public enum SMSStatus {
    unread = 0,
    read = 1,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GtAuth : pb::GeneratedMessage<GtAuth, GtAuth.Builder> {
    private GtAuth() { }
    private static readonly GtAuth defaultInstance = new GtAuth().MakeReadOnly();
    private static readonly string[] _gtAuthFieldNames = new string[] { "appkey", "seqId", "sign", "timestamp" };
    private static readonly uint[] _gtAuthFieldTags = new uint[] { 18, 34, 10, 24 };
    public static GtAuth DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GtAuth DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GtAuth ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_GtAuth__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GtAuth, GtAuth.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_GtAuth__FieldAccessorTable; }
    }
    
    public const int SignFieldNumber = 1;
    private bool hasSign;
    private string sign_ = "";
    public bool HasSign {
      get { return hasSign; }
    }
    public string Sign {
      get { return sign_; }
    }
    
    public const int AppkeyFieldNumber = 2;
    private bool hasAppkey;
    private string appkey_ = "";
    public bool HasAppkey {
      get { return hasAppkey; }
    }
    public string Appkey {
      get { return appkey_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int SeqIdFieldNumber = 4;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSign) return false;
        if (!hasAppkey) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gtAuthFieldNames;
      if (hasSign) {
        output.WriteString(1, field_names[2], Sign);
      }
      if (hasAppkey) {
        output.WriteString(2, field_names[0], Appkey);
      }
      if (hasTimestamp) {
        output.WriteInt64(3, field_names[3], Timestamp);
      }
      if (hasSeqId) {
        output.WriteString(4, field_names[1], SeqId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSign) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sign);
        }
        if (hasAppkey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Appkey);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Timestamp);
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SeqId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GtAuth ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GtAuth ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GtAuth ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GtAuth ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GtAuth ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GtAuth ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GtAuth ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GtAuth ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GtAuth ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GtAuth ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GtAuth MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GtAuth prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GtAuth, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GtAuth cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GtAuth result;
      
      private GtAuth PrepareBuilder() {
        if (resultIsReadOnly) {
          GtAuth original = result;
          result = new GtAuth();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GtAuth MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.GtAuth.Descriptor; }
      }
      
      public override GtAuth DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.GtAuth.DefaultInstance; }
      }
      
      public override GtAuth BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GtAuth) {
          return MergeFrom((GtAuth) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GtAuth other) {
        if (other == global::com.gexin.rp.sdk.dto.GtAuth.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSign) {
          Sign = other.Sign;
        }
        if (other.HasAppkey) {
          Appkey = other.Appkey;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gtAuthFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gtAuthFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSign = input.ReadString(ref result.sign_);
              break;
            }
            case 18: {
              result.hasAppkey = input.ReadString(ref result.appkey_);
              break;
            }
            case 24: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 34: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSign {
        get { return result.hasSign; }
      }
      public string Sign {
        get { return result.Sign; }
        set { SetSign(value); }
      }
      public Builder SetSign(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSign = true;
        result.sign_ = value;
        return this;
      }
      public Builder ClearSign() {
        PrepareBuilder();
        result.hasSign = false;
        result.sign_ = "";
        return this;
      }
      
      public bool HasAppkey {
        get { return result.hasAppkey; }
      }
      public string Appkey {
        get { return result.Appkey; }
        set { SetAppkey(value); }
      }
      public Builder SetAppkey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppkey = true;
        result.appkey_ = value;
        return this;
      }
      public Builder ClearAppkey() {
        PrepareBuilder();
        result.hasAppkey = false;
        result.appkey_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
    }
    static GtAuth() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GtAuthResult : pb::GeneratedMessage<GtAuthResult, GtAuthResult.Builder> {
    private GtAuthResult() { }
    private static readonly GtAuthResult defaultInstance = new GtAuthResult().MakeReadOnly();
    private static readonly string[] _gtAuthResultFieldNames = new string[] { "code", "info", "redirectAddress", "seqId" };
    private static readonly uint[] _gtAuthResultFieldTags = new uint[] { 8, 34, 18, 26 };
    public static GtAuthResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GtAuthResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GtAuthResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_GtAuthResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GtAuthResult, GtAuthResult.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_GtAuthResult__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum GtAuthResultCode {
        successed = 0,
        failed_noSign = 1,
        failed_noAppkey = 2,
        failed_noTimestamp = 3,
        failed_AuthIllegal = 4,
        redirect = 5,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private int code_;
    public bool HasCode {
      get { return hasCode; }
    }
    public int Code {
      get { return code_; }
    }
    
    public const int RedirectAddressFieldNumber = 2;
    private bool hasRedirectAddress;
    private string redirectAddress_ = "";
    public bool HasRedirectAddress {
      get { return hasRedirectAddress; }
    }
    public string RedirectAddress {
      get { return redirectAddress_; }
    }
    
    public const int SeqIdFieldNumber = 3;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int InfoFieldNumber = 4;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gtAuthResultFieldNames;
      if (hasCode) {
        output.WriteInt32(1, field_names[0], Code);
      }
      if (hasRedirectAddress) {
        output.WriteString(2, field_names[2], RedirectAddress);
      }
      if (hasSeqId) {
        output.WriteString(3, field_names[3], SeqId);
      }
      if (hasInfo) {
        output.WriteString(4, field_names[1], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Code);
        }
        if (hasRedirectAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RedirectAddress);
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SeqId);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GtAuthResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GtAuthResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GtAuthResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GtAuthResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GtAuthResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GtAuthResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GtAuthResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GtAuthResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GtAuthResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GtAuthResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GtAuthResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GtAuthResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GtAuthResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GtAuthResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GtAuthResult result;
      
      private GtAuthResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GtAuthResult original = result;
          result = new GtAuthResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GtAuthResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.GtAuthResult.Descriptor; }
      }
      
      public override GtAuthResult DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.GtAuthResult.DefaultInstance; }
      }
      
      public override GtAuthResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GtAuthResult) {
          return MergeFrom((GtAuthResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GtAuthResult other) {
        if (other == global::com.gexin.rp.sdk.dto.GtAuthResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasRedirectAddress) {
          RedirectAddress = other.RedirectAddress;
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gtAuthResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gtAuthResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadInt32(ref result.code_);
              break;
            }
            case 18: {
              result.hasRedirectAddress = input.ReadString(ref result.redirectAddress_);
              break;
            }
            case 26: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 34: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public int Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(int value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasRedirectAddress {
        get { return result.hasRedirectAddress; }
      }
      public string RedirectAddress {
        get { return result.RedirectAddress; }
        set { SetRedirectAddress(value); }
      }
      public Builder SetRedirectAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRedirectAddress = true;
        result.redirectAddress_ = value;
        return this;
      }
      public Builder ClearRedirectAddress() {
        PrepareBuilder();
        result.hasRedirectAddress = false;
        result.redirectAddress_ = "";
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
    }
    static GtAuthResult() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReqServList : pb::GeneratedMessage<ReqServList, ReqServList.Builder> {
    private ReqServList() { }
    private static readonly ReqServList defaultInstance = new ReqServList().MakeReadOnly();
    private static readonly string[] _reqServListFieldNames = new string[] { "seqId", "timestamp" };
    private static readonly uint[] _reqServListFieldTags = new uint[] { 10, 24 };
    public static ReqServList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReqServList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReqServList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ReqServList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReqServList, ReqServList.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ReqServList__FieldAccessorTable; }
    }
    
    public const int SeqIdFieldNumber = 1;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _reqServListFieldNames;
      if (hasSeqId) {
        output.WriteString(1, field_names[0], SeqId);
      }
      if (hasTimestamp) {
        output.WriteInt64(3, field_names[1], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SeqId);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReqServList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReqServList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReqServList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReqServList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReqServList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReqServList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReqServList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReqServList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReqServList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReqServList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReqServList MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReqServList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ReqServList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReqServList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReqServList result;
      
      private ReqServList PrepareBuilder() {
        if (resultIsReadOnly) {
          ReqServList original = result;
          result = new ReqServList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReqServList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.ReqServList.Descriptor; }
      }
      
      public override ReqServList DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.ReqServList.DefaultInstance; }
      }
      
      public override ReqServList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReqServList) {
          return MergeFrom((ReqServList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReqServList other) {
        if (other == global::com.gexin.rp.sdk.dto.ReqServList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_reqServListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _reqServListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 24: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static ReqServList() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReqServListResult : pb::GeneratedMessage<ReqServListResult, ReqServListResult.Builder> {
    private ReqServListResult() { }
    private static readonly ReqServListResult defaultInstance = new ReqServListResult().MakeReadOnly();
    private static readonly string[] _reqServListResultFieldNames = new string[] { "code", "host", "seqId" };
    private static readonly uint[] _reqServListResultFieldTags = new uint[] { 8, 18, 26 };
    public static ReqServListResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReqServListResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReqServListResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ReqServListResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReqServListResult, ReqServListResult.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ReqServListResult__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ReqServHostResultCode {
        successed = 0,
        failed = 1,
        busy = 2,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private int code_;
    public bool HasCode {
      get { return hasCode; }
    }
    public int Code {
      get { return code_; }
    }
    
    public const int HostFieldNumber = 2;
    private pbc::PopsicleList<string> host_ = new pbc::PopsicleList<string>();
    public scg::IList<string> HostList {
      get { return pbc::Lists.AsReadOnly(host_); }
    }
    public int HostCount {
      get { return host_.Count; }
    }
    public string GetHost(int index) {
      return host_[index];
    }
    
    public const int SeqIdFieldNumber = 3;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _reqServListResultFieldNames;
      if (hasCode) {
        output.WriteInt32(1, field_names[0], Code);
      }
      if (host_.Count > 0) {
        output.WriteStringArray(2, field_names[1], host_);
      }
      if (hasSeqId) {
        output.WriteString(3, field_names[2], SeqId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Code);
        }
        {
          int dataSize = 0;
          foreach (string element in HostList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * host_.Count;
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SeqId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReqServListResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReqServListResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReqServListResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReqServListResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReqServListResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReqServListResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReqServListResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReqServListResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReqServListResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReqServListResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReqServListResult MakeReadOnly() {
      host_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReqServListResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ReqServListResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReqServListResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReqServListResult result;
      
      private ReqServListResult PrepareBuilder() {
        if (resultIsReadOnly) {
          ReqServListResult original = result;
          result = new ReqServListResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReqServListResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.ReqServListResult.Descriptor; }
      }
      
      public override ReqServListResult DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.ReqServListResult.DefaultInstance; }
      }
      
      public override ReqServListResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReqServListResult) {
          return MergeFrom((ReqServListResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReqServListResult other) {
        if (other == global::com.gexin.rp.sdk.dto.ReqServListResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.host_.Count != 0) {
          result.host_.Add(other.host_);
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_reqServListResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _reqServListResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadInt32(ref result.code_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.host_);
              break;
            }
            case 26: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public int Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(int value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> HostList {
        get { return PrepareBuilder().host_; }
      }
      public int HostCount {
        get { return result.HostCount; }
      }
      public string GetHost(int index) {
        return result.GetHost(index);
      }
      public Builder SetHost(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.host_[index] = value;
        return this;
      }
      public Builder AddHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.host_.Add(value);
        return this;
      }
      public Builder AddRangeHost(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.host_.Add(values);
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.host_.Clear();
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
    }
    static ReqServListResult() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushListResult : pb::GeneratedMessage<PushListResult, PushListResult.Builder> {
    private PushListResult() { }
    private static readonly PushListResult defaultInstance = new PushListResult().MakeReadOnly();
    private static readonly string[] _pushListResultFieldNames = new string[] { "results" };
    private static readonly uint[] _pushListResultFieldTags = new uint[] { 10 };
    public static PushListResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushListResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushListResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushListResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushListResult, PushListResult.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushListResult__FieldAccessorTable; }
    }
    
    public const int ResultsFieldNumber = 1;
    private pbc::PopsicleList<global::com.gexin.rp.sdk.dto.PushResult> results_ = new pbc::PopsicleList<global::com.gexin.rp.sdk.dto.PushResult>();
    public scg::IList<global::com.gexin.rp.sdk.dto.PushResult> ResultsList {
      get { return results_; }
    }
    public int ResultsCount {
      get { return results_.Count; }
    }
    public global::com.gexin.rp.sdk.dto.PushResult GetResults(int index) {
      return results_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::com.gexin.rp.sdk.dto.PushResult element in ResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushListResultFieldNames;
      if (results_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], results_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.gexin.rp.sdk.dto.PushResult element in ResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushListResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushListResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushListResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushListResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushListResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushListResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushListResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushListResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushListResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushListResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushListResult MakeReadOnly() {
      results_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushListResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushListResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushListResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushListResult result;
      
      private PushListResult PrepareBuilder() {
        if (resultIsReadOnly) {
          PushListResult original = result;
          result = new PushListResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushListResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushListResult.Descriptor; }
      }
      
      public override PushListResult DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushListResult.DefaultInstance; }
      }
      
      public override PushListResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushListResult) {
          return MergeFrom((PushListResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushListResult other) {
        if (other == global::com.gexin.rp.sdk.dto.PushListResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.results_.Count != 0) {
          result.results_.Add(other.results_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushListResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushListResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.results_, global::com.gexin.rp.sdk.dto.PushResult.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.gexin.rp.sdk.dto.PushResult> ResultsList {
        get { return PrepareBuilder().results_; }
      }
      public int ResultsCount {
        get { return result.ResultsCount; }
      }
      public global::com.gexin.rp.sdk.dto.PushResult GetResults(int index) {
        return result.GetResults(index);
      }
      public Builder SetResults(int index, global::com.gexin.rp.sdk.dto.PushResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_[index] = value;
        return this;
      }
      public Builder SetResults(int index, global::com.gexin.rp.sdk.dto.PushResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResults(global::com.gexin.rp.sdk.dto.PushResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_.Add(value);
        return this;
      }
      public Builder AddResults(global::com.gexin.rp.sdk.dto.PushResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResults(scg::IEnumerable<global::com.gexin.rp.sdk.dto.PushResult> values) {
        PrepareBuilder();
        result.results_.Add(values);
        return this;
      }
      public Builder ClearResults() {
        PrepareBuilder();
        result.results_.Clear();
        return this;
      }
    }
    static PushListResult() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushResult : pb::GeneratedMessage<PushResult, PushResult.Builder> {
    private PushResult() { }
    private static readonly PushResult defaultInstance = new PushResult().MakeReadOnly();
    private static readonly string[] _pushResultFieldNames = new string[] { "info", "messageId", "result", "seqId", "target", "taskId", "traceId" };
    private static readonly uint[] _pushResultFieldTags = new uint[] { 50, 26, 8, 34, 42, 18, 58 };
    public static PushResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushResult, PushResult.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushResult__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum EPushResult {
        successed_online = 0,
        successed_offline = 1,
        successed_ignore = 2,
        failed = 3,
        busy = 4,
        success_startBatch = 5,
        success_endBatch = 6,
      }
      
    }
    #endregion
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private global::com.gexin.rp.sdk.dto.PushResult.Types.EPushResult result_ = global::com.gexin.rp.sdk.dto.PushResult.Types.EPushResult.successed_online;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::com.gexin.rp.sdk.dto.PushResult.Types.EPushResult Result {
      get { return result_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int MessageIdFieldNumber = 3;
    private bool hasMessageId;
    private string messageId_ = "";
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public string MessageId {
      get { return messageId_; }
    }
    
    public const int SeqIdFieldNumber = 4;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int TargetFieldNumber = 5;
    private bool hasTarget;
    private string target_ = "";
    public bool HasTarget {
      get { return hasTarget; }
    }
    public string Target {
      get { return target_; }
    }
    
    public const int InfoFieldNumber = 6;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public const int TraceIdFieldNumber = 7;
    private bool hasTraceId;
    private string traceId_ = "";
    public bool HasTraceId {
      get { return hasTraceId; }
    }
    public string TraceId {
      get { return traceId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        if (!hasTaskId) return false;
        if (!hasMessageId) return false;
        if (!hasSeqId) return false;
        if (!hasTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushResultFieldNames;
      if (hasResult) {
        output.WriteEnum(1, field_names[2], (int) Result, Result);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[5], TaskId);
      }
      if (hasMessageId) {
        output.WriteString(3, field_names[1], MessageId);
      }
      if (hasSeqId) {
        output.WriteString(4, field_names[3], SeqId);
      }
      if (hasTarget) {
        output.WriteString(5, field_names[4], Target);
      }
      if (hasInfo) {
        output.WriteString(6, field_names[0], Info);
      }
      if (hasTraceId) {
        output.WriteString(7, field_names[6], TraceId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Result);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, MessageId);
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SeqId);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Target);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Info);
        }
        if (hasTraceId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, TraceId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushResult result;
      
      private PushResult PrepareBuilder() {
        if (resultIsReadOnly) {
          PushResult original = result;
          result = new PushResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushResult.Descriptor; }
      }
      
      public override PushResult DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushResult.DefaultInstance; }
      }
      
      public override PushResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushResult) {
          return MergeFrom((PushResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushResult other) {
        if (other == global::com.gexin.rp.sdk.dto.PushResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasTarget) {
          Target = other.Target;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        if (other.HasTraceId) {
          TraceId = other.TraceId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.result_, out unknown)) {
                result.hasResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 26: {
              result.hasMessageId = input.ReadString(ref result.messageId_);
              break;
            }
            case 34: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 42: {
              result.hasTarget = input.ReadString(ref result.target_);
              break;
            }
            case 50: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
            case 58: {
              result.hasTraceId = input.ReadString(ref result.traceId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResult {
       get { return result.hasResult; }
      }
      public global::com.gexin.rp.sdk.dto.PushResult.Types.EPushResult Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::com.gexin.rp.sdk.dto.PushResult.Types.EPushResult value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = global::com.gexin.rp.sdk.dto.PushResult.Types.EPushResult.successed_online;
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public string MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = "";
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasTarget {
        get { return result.hasTarget; }
      }
      public string Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = "";
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
      
      public bool HasTraceId {
        get { return result.hasTraceId; }
      }
      public string TraceId {
        get { return result.TraceId; }
        set { SetTraceId(value); }
      }
      public Builder SetTraceId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTraceId = true;
        result.traceId_ = value;
        return this;
      }
      public Builder ClearTraceId() {
        PrepareBuilder();
        result.hasTraceId = false;
        result.traceId_ = "";
        return this;
      }
    }
    static PushResult() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushOSSingleMessage : pb::GeneratedMessage<PushOSSingleMessage, PushOSSingleMessage.Builder> {
    private PushOSSingleMessage() { }
    private static readonly PushOSSingleMessage defaultInstance = new PushOSSingleMessage().MakeReadOnly();
    private static readonly string[] _pushOSSingleMessageFieldNames = new string[] { "message", "seqId", "target" };
    private static readonly uint[] _pushOSSingleMessageFieldTags = new uint[] { 18, 10, 26 };
    public static PushOSSingleMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushOSSingleMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushOSSingleMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushOSSingleMessage, PushOSSingleMessage.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushOSSingleMessage__FieldAccessorTable; }
    }
    
    public const int SeqIdFieldNumber = 1;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private global::com.gexin.rp.sdk.dto.OSMessage message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::com.gexin.rp.sdk.dto.OSMessage Message {
      get { return message_ ?? global::com.gexin.rp.sdk.dto.OSMessage.DefaultInstance; }
    }
    
    public const int TargetFieldNumber = 3;
    private bool hasTarget;
    private global::com.gexin.rp.sdk.dto.Target target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::com.gexin.rp.sdk.dto.Target Target {
      get { return target_ ?? global::com.gexin.rp.sdk.dto.Target.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeqId) return false;
        if (!hasMessage) return false;
        if (!hasTarget) return false;
        if (!Message.IsInitialized) return false;
        if (!Target.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushOSSingleMessageFieldNames;
      if (hasSeqId) {
        output.WriteString(1, field_names[1], SeqId);
      }
      if (hasMessage) {
        output.WriteMessage(2, field_names[0], Message);
      }
      if (hasTarget) {
        output.WriteMessage(3, field_names[2], Target);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SeqId);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Message);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Target);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushOSSingleMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushOSSingleMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushOSSingleMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushOSSingleMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushOSSingleMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushOSSingleMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushOSSingleMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushOSSingleMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushOSSingleMessage result;
      
      private PushOSSingleMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          PushOSSingleMessage original = result;
          result = new PushOSSingleMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushOSSingleMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushOSSingleMessage.Descriptor; }
      }
      
      public override PushOSSingleMessage DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushOSSingleMessage.DefaultInstance; }
      }
      
      public override PushOSSingleMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushOSSingleMessage) {
          return MergeFrom((PushOSSingleMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushOSSingleMessage other) {
        if (other == global::com.gexin.rp.sdk.dto.PushOSSingleMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushOSSingleMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushOSSingleMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 18: {
              global::com.gexin.rp.sdk.dto.OSMessage.Builder subBuilder = global::com.gexin.rp.sdk.dto.OSMessage.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.gexin.rp.sdk.dto.Target.Builder subBuilder = global::com.gexin.rp.sdk.dto.Target.CreateBuilder();
              if (result.hasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::com.gexin.rp.sdk.dto.OSMessage Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.OSMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.OSMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::com.gexin.rp.sdk.dto.OSMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::com.gexin.rp.sdk.dto.OSMessage.DefaultInstance) {
            result.message_ = global::com.gexin.rp.sdk.dto.OSMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
      
      public bool HasTarget {
       get { return result.hasTarget; }
      }
      public global::com.gexin.rp.sdk.dto.Target Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::com.gexin.rp.sdk.dto.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::com.gexin.rp.sdk.dto.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::com.gexin.rp.sdk.dto.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTarget &&
            result.target_ != global::com.gexin.rp.sdk.dto.Target.DefaultInstance) {
            result.target_ = global::com.gexin.rp.sdk.dto.Target.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = null;
        return this;
      }
    }
    static PushOSSingleMessage() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushMMPSingleMessage : pb::GeneratedMessage<PushMMPSingleMessage, PushMMPSingleMessage.Builder> {
    private PushMMPSingleMessage() { }
    private static readonly PushMMPSingleMessage defaultInstance = new PushMMPSingleMessage().MakeReadOnly();
    private static readonly string[] _pushMMPSingleMessageFieldNames = new string[] { "message", "seqId", "target" };
    private static readonly uint[] _pushMMPSingleMessageFieldTags = new uint[] { 18, 10, 26 };
    public static PushMMPSingleMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushMMPSingleMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushMMPSingleMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushMMPSingleMessage, PushMMPSingleMessage.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushMMPSingleMessage__FieldAccessorTable; }
    }
    
    public const int SeqIdFieldNumber = 1;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private global::com.gexin.rp.sdk.dto.MMPMessage message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::com.gexin.rp.sdk.dto.MMPMessage Message {
      get { return message_ ?? global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance; }
    }
    
    public const int TargetFieldNumber = 3;
    private bool hasTarget;
    private global::com.gexin.rp.sdk.dto.Target target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::com.gexin.rp.sdk.dto.Target Target {
      get { return target_ ?? global::com.gexin.rp.sdk.dto.Target.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeqId) return false;
        if (!hasMessage) return false;
        if (!hasTarget) return false;
        if (!Message.IsInitialized) return false;
        if (!Target.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushMMPSingleMessageFieldNames;
      if (hasSeqId) {
        output.WriteString(1, field_names[1], SeqId);
      }
      if (hasMessage) {
        output.WriteMessage(2, field_names[0], Message);
      }
      if (hasTarget) {
        output.WriteMessage(3, field_names[2], Target);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SeqId);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Message);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Target);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushMMPSingleMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushMMPSingleMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushMMPSingleMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushMMPSingleMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushMMPSingleMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushMMPSingleMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushMMPSingleMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushMMPSingleMessage result;
      
      private PushMMPSingleMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          PushMMPSingleMessage original = result;
          result = new PushMMPSingleMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushMMPSingleMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushMMPSingleMessage.Descriptor; }
      }
      
      public override PushMMPSingleMessage DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushMMPSingleMessage.DefaultInstance; }
      }
      
      public override PushMMPSingleMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushMMPSingleMessage) {
          return MergeFrom((PushMMPSingleMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushMMPSingleMessage other) {
        if (other == global::com.gexin.rp.sdk.dto.PushMMPSingleMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushMMPSingleMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushMMPSingleMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 18: {
              global::com.gexin.rp.sdk.dto.MMPMessage.Builder subBuilder = global::com.gexin.rp.sdk.dto.MMPMessage.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.gexin.rp.sdk.dto.Target.Builder subBuilder = global::com.gexin.rp.sdk.dto.Target.CreateBuilder();
              if (result.hasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::com.gexin.rp.sdk.dto.MMPMessage Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.MMPMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.MMPMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::com.gexin.rp.sdk.dto.MMPMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance) {
            result.message_ = global::com.gexin.rp.sdk.dto.MMPMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
      
      public bool HasTarget {
       get { return result.hasTarget; }
      }
      public global::com.gexin.rp.sdk.dto.Target Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::com.gexin.rp.sdk.dto.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::com.gexin.rp.sdk.dto.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::com.gexin.rp.sdk.dto.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTarget &&
            result.target_ != global::com.gexin.rp.sdk.dto.Target.DefaultInstance) {
            result.target_ = global::com.gexin.rp.sdk.dto.Target.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = null;
        return this;
      }
    }
    static PushMMPSingleMessage() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartMMPBatchTask : pb::GeneratedMessage<StartMMPBatchTask, StartMMPBatchTask.Builder> {
    private StartMMPBatchTask() { }
    private static readonly StartMMPBatchTask defaultInstance = new StartMMPBatchTask().MakeReadOnly();
    private static readonly string[] _startMMPBatchTaskFieldNames = new string[] { "expire", "message", "seqId" };
    private static readonly uint[] _startMMPBatchTaskFieldTags = new uint[] { 16, 10, 26 };
    public static StartMMPBatchTask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StartMMPBatchTask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StartMMPBatchTask ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StartMMPBatchTask, StartMMPBatchTask.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_StartMMPBatchTask__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private global::com.gexin.rp.sdk.dto.MMPMessage message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::com.gexin.rp.sdk.dto.MMPMessage Message {
      get { return message_ ?? global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance; }
    }
    
    public const int ExpireFieldNumber = 2;
    private bool hasExpire;
    private long expire_ = 72L;
    public bool HasExpire {
      get { return hasExpire; }
    }
    public long Expire {
      get { return expire_; }
    }
    
    public const int SeqIdFieldNumber = 3;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessage) return false;
        if (!hasExpire) return false;
        if (!Message.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _startMMPBatchTaskFieldNames;
      if (hasMessage) {
        output.WriteMessage(1, field_names[1], Message);
      }
      if (hasExpire) {
        output.WriteInt64(2, field_names[0], Expire);
      }
      if (hasSeqId) {
        output.WriteString(3, field_names[2], SeqId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Message);
        }
        if (hasExpire) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Expire);
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SeqId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StartMMPBatchTask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StartMMPBatchTask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StartMMPBatchTask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartMMPBatchTask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartMMPBatchTask MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StartMMPBatchTask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StartMMPBatchTask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartMMPBatchTask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StartMMPBatchTask result;
      
      private StartMMPBatchTask PrepareBuilder() {
        if (resultIsReadOnly) {
          StartMMPBatchTask original = result;
          result = new StartMMPBatchTask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StartMMPBatchTask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.StartMMPBatchTask.Descriptor; }
      }
      
      public override StartMMPBatchTask DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.StartMMPBatchTask.DefaultInstance; }
      }
      
      public override StartMMPBatchTask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StartMMPBatchTask) {
          return MergeFrom((StartMMPBatchTask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StartMMPBatchTask other) {
        if (other == global::com.gexin.rp.sdk.dto.StartMMPBatchTask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        if (other.HasExpire) {
          Expire = other.Expire;
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startMMPBatchTaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startMMPBatchTaskFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.gexin.rp.sdk.dto.MMPMessage.Builder subBuilder = global::com.gexin.rp.sdk.dto.MMPMessage.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasExpire = input.ReadInt64(ref result.expire_);
              break;
            }
            case 26: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::com.gexin.rp.sdk.dto.MMPMessage Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.MMPMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.MMPMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::com.gexin.rp.sdk.dto.MMPMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance) {
            result.message_ = global::com.gexin.rp.sdk.dto.MMPMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
      
      public bool HasExpire {
        get { return result.hasExpire; }
      }
      public long Expire {
        get { return result.Expire; }
        set { SetExpire(value); }
      }
      public Builder SetExpire(long value) {
        PrepareBuilder();
        result.hasExpire = true;
        result.expire_ = value;
        return this;
      }
      public Builder ClearExpire() {
        PrepareBuilder();
        result.hasExpire = false;
        result.expire_ = 72L;
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
    }
    static StartMMPBatchTask() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartOSBatchTask : pb::GeneratedMessage<StartOSBatchTask, StartOSBatchTask.Builder> {
    private StartOSBatchTask() { }
    private static readonly StartOSBatchTask defaultInstance = new StartOSBatchTask().MakeReadOnly();
    private static readonly string[] _startOSBatchTaskFieldNames = new string[] { "expire", "message" };
    private static readonly uint[] _startOSBatchTaskFieldTags = new uint[] { 16, 10 };
    public static StartOSBatchTask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StartOSBatchTask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StartOSBatchTask ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StartOSBatchTask, StartOSBatchTask.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_StartOSBatchTask__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private global::com.gexin.rp.sdk.dto.OSMessage message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::com.gexin.rp.sdk.dto.OSMessage Message {
      get { return message_ ?? global::com.gexin.rp.sdk.dto.OSMessage.DefaultInstance; }
    }
    
    public const int ExpireFieldNumber = 2;
    private bool hasExpire;
    private long expire_ = 72L;
    public bool HasExpire {
      get { return hasExpire; }
    }
    public long Expire {
      get { return expire_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessage) return false;
        if (!hasExpire) return false;
        if (!Message.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _startOSBatchTaskFieldNames;
      if (hasMessage) {
        output.WriteMessage(1, field_names[1], Message);
      }
      if (hasExpire) {
        output.WriteInt64(2, field_names[0], Expire);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Message);
        }
        if (hasExpire) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Expire);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StartOSBatchTask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StartOSBatchTask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StartOSBatchTask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartOSBatchTask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartOSBatchTask MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StartOSBatchTask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StartOSBatchTask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartOSBatchTask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StartOSBatchTask result;
      
      private StartOSBatchTask PrepareBuilder() {
        if (resultIsReadOnly) {
          StartOSBatchTask original = result;
          result = new StartOSBatchTask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StartOSBatchTask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.StartOSBatchTask.Descriptor; }
      }
      
      public override StartOSBatchTask DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.StartOSBatchTask.DefaultInstance; }
      }
      
      public override StartOSBatchTask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StartOSBatchTask) {
          return MergeFrom((StartOSBatchTask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StartOSBatchTask other) {
        if (other == global::com.gexin.rp.sdk.dto.StartOSBatchTask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        if (other.HasExpire) {
          Expire = other.Expire;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startOSBatchTaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startOSBatchTaskFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.gexin.rp.sdk.dto.OSMessage.Builder subBuilder = global::com.gexin.rp.sdk.dto.OSMessage.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasExpire = input.ReadInt64(ref result.expire_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::com.gexin.rp.sdk.dto.OSMessage Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.OSMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.OSMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::com.gexin.rp.sdk.dto.OSMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::com.gexin.rp.sdk.dto.OSMessage.DefaultInstance) {
            result.message_ = global::com.gexin.rp.sdk.dto.OSMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
      
      public bool HasExpire {
        get { return result.hasExpire; }
      }
      public long Expire {
        get { return result.Expire; }
        set { SetExpire(value); }
      }
      public Builder SetExpire(long value) {
        PrepareBuilder();
        result.hasExpire = true;
        result.expire_ = value;
        return this;
      }
      public Builder ClearExpire() {
        PrepareBuilder();
        result.hasExpire = false;
        result.expire_ = 72L;
        return this;
      }
    }
    static StartOSBatchTask() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushListMessage : pb::GeneratedMessage<PushListMessage, PushListMessage.Builder> {
    private PushListMessage() { }
    private static readonly PushListMessage defaultInstance = new PushListMessage().MakeReadOnly();
    private static readonly string[] _pushListMessageFieldNames = new string[] { "seqId", "targets", "taskId" };
    private static readonly uint[] _pushListMessageFieldTags = new uint[] { 10, 26, 18 };
    public static PushListMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushListMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushListMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushListMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushListMessage, PushListMessage.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushListMessage__FieldAccessorTable; }
    }
    
    public const int SeqIdFieldNumber = 1;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int TargetsFieldNumber = 3;
    private pbc::PopsicleList<global::com.gexin.rp.sdk.dto.Target> targets_ = new pbc::PopsicleList<global::com.gexin.rp.sdk.dto.Target>();
    public scg::IList<global::com.gexin.rp.sdk.dto.Target> TargetsList {
      get { return targets_; }
    }
    public int TargetsCount {
      get { return targets_.Count; }
    }
    public global::com.gexin.rp.sdk.dto.Target GetTargets(int index) {
      return targets_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeqId) return false;
        if (!hasTaskId) return false;
        foreach (global::com.gexin.rp.sdk.dto.Target element in TargetsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushListMessageFieldNames;
      if (hasSeqId) {
        output.WriteString(1, field_names[0], SeqId);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[2], TaskId);
      }
      if (targets_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], targets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SeqId);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        foreach (global::com.gexin.rp.sdk.dto.Target element in TargetsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushListMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushListMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushListMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushListMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushListMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushListMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushListMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushListMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushListMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushListMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushListMessage MakeReadOnly() {
      targets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushListMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushListMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushListMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushListMessage result;
      
      private PushListMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          PushListMessage original = result;
          result = new PushListMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushListMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushListMessage.Descriptor; }
      }
      
      public override PushListMessage DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushListMessage.DefaultInstance; }
      }
      
      public override PushListMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushListMessage) {
          return MergeFrom((PushListMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushListMessage other) {
        if (other == global::com.gexin.rp.sdk.dto.PushListMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.targets_.Count != 0) {
          result.targets_.Add(other.targets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushListMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushListMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.targets_, global::com.gexin.rp.sdk.dto.Target.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::com.gexin.rp.sdk.dto.Target> TargetsList {
        get { return PrepareBuilder().targets_; }
      }
      public int TargetsCount {
        get { return result.TargetsCount; }
      }
      public global::com.gexin.rp.sdk.dto.Target GetTargets(int index) {
        return result.GetTargets(index);
      }
      public Builder SetTargets(int index, global::com.gexin.rp.sdk.dto.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.targets_[index] = value;
        return this;
      }
      public Builder SetTargets(int index, global::com.gexin.rp.sdk.dto.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.targets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTargets(global::com.gexin.rp.sdk.dto.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.targets_.Add(value);
        return this;
      }
      public Builder AddTargets(global::com.gexin.rp.sdk.dto.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.targets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTargets(scg::IEnumerable<global::com.gexin.rp.sdk.dto.Target> values) {
        PrepareBuilder();
        result.targets_.Add(values);
        return this;
      }
      public Builder ClearTargets() {
        PrepareBuilder();
        result.targets_.Clear();
        return this;
      }
    }
    static PushListMessage() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EndBatchTask : pb::GeneratedMessage<EndBatchTask, EndBatchTask.Builder> {
    private EndBatchTask() { }
    private static readonly EndBatchTask defaultInstance = new EndBatchTask().MakeReadOnly();
    private static readonly string[] _endBatchTaskFieldNames = new string[] { "seqId", "taskId" };
    private static readonly uint[] _endBatchTaskFieldTags = new uint[] { 18, 10 };
    public static EndBatchTask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EndBatchTask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EndBatchTask ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_EndBatchTask__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EndBatchTask, EndBatchTask.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_EndBatchTask__FieldAccessorTable; }
    }
    
    public const int TaskIdFieldNumber = 1;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int SeqIdFieldNumber = 2;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTaskId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _endBatchTaskFieldNames;
      if (hasTaskId) {
        output.WriteString(1, field_names[1], TaskId);
      }
      if (hasSeqId) {
        output.WriteString(2, field_names[0], SeqId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TaskId);
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SeqId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EndBatchTask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EndBatchTask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EndBatchTask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EndBatchTask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EndBatchTask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EndBatchTask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EndBatchTask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EndBatchTask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EndBatchTask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EndBatchTask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EndBatchTask MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EndBatchTask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EndBatchTask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EndBatchTask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EndBatchTask result;
      
      private EndBatchTask PrepareBuilder() {
        if (resultIsReadOnly) {
          EndBatchTask original = result;
          result = new EndBatchTask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EndBatchTask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.EndBatchTask.Descriptor; }
      }
      
      public override EndBatchTask DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.EndBatchTask.DefaultInstance; }
      }
      
      public override EndBatchTask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EndBatchTask) {
          return MergeFrom((EndBatchTask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EndBatchTask other) {
        if (other == global::com.gexin.rp.sdk.dto.EndBatchTask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_endBatchTaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _endBatchTaskFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 18: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
    }
    static EndBatchTask() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushMMPAppMessage : pb::GeneratedMessage<PushMMPAppMessage, PushMMPAppMessage.Builder> {
    private PushMMPAppMessage() { }
    private static readonly PushMMPAppMessage defaultInstance = new PushMMPAppMessage().MakeReadOnly();
    private static readonly string[] _pushMMPAppMessageFieldNames = new string[] { "appIdList", "message", "phoneTypeList", "provinceList", "seqId" };
    private static readonly uint[] _pushMMPAppMessageFieldTags = new uint[] { 18, 10, 26, 34, 42 };
    public static PushMMPAppMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushMMPAppMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushMMPAppMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushMMPAppMessage, PushMMPAppMessage.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushMMPAppMessage__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private global::com.gexin.rp.sdk.dto.MMPMessage message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::com.gexin.rp.sdk.dto.MMPMessage Message {
      get { return message_ ?? global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance; }
    }
    
    public const int AppIdListFieldNumber = 2;
    private pbc::PopsicleList<string> appIdList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AppIdListList {
      get { return pbc::Lists.AsReadOnly(appIdList_); }
    }
    public int AppIdListCount {
      get { return appIdList_.Count; }
    }
    public string GetAppIdList(int index) {
      return appIdList_[index];
    }
    
    public const int PhoneTypeListFieldNumber = 3;
    private pbc::PopsicleList<string> phoneTypeList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> PhoneTypeListList {
      get { return pbc::Lists.AsReadOnly(phoneTypeList_); }
    }
    public int PhoneTypeListCount {
      get { return phoneTypeList_.Count; }
    }
    public string GetPhoneTypeList(int index) {
      return phoneTypeList_[index];
    }
    
    public const int ProvinceListFieldNumber = 4;
    private pbc::PopsicleList<string> provinceList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ProvinceListList {
      get { return pbc::Lists.AsReadOnly(provinceList_); }
    }
    public int ProvinceListCount {
      get { return provinceList_.Count; }
    }
    public string GetProvinceList(int index) {
      return provinceList_[index];
    }
    
    public const int SeqIdFieldNumber = 5;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessage) return false;
        if (!Message.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushMMPAppMessageFieldNames;
      if (hasMessage) {
        output.WriteMessage(1, field_names[1], Message);
      }
      if (appIdList_.Count > 0) {
        output.WriteStringArray(2, field_names[0], appIdList_);
      }
      if (phoneTypeList_.Count > 0) {
        output.WriteStringArray(3, field_names[2], phoneTypeList_);
      }
      if (provinceList_.Count > 0) {
        output.WriteStringArray(4, field_names[3], provinceList_);
      }
      if (hasSeqId) {
        output.WriteString(5, field_names[4], SeqId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Message);
        }
        {
          int dataSize = 0;
          foreach (string element in AppIdListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * appIdList_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in PhoneTypeListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * phoneTypeList_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in ProvinceListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * provinceList_.Count;
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, SeqId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushMMPAppMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushMMPAppMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushMMPAppMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushMMPAppMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushMMPAppMessage MakeReadOnly() {
      appIdList_.MakeReadOnly();
      phoneTypeList_.MakeReadOnly();
      provinceList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushMMPAppMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushMMPAppMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushMMPAppMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushMMPAppMessage result;
      
      private PushMMPAppMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          PushMMPAppMessage original = result;
          result = new PushMMPAppMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushMMPAppMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushMMPAppMessage.Descriptor; }
      }
      
      public override PushMMPAppMessage DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushMMPAppMessage.DefaultInstance; }
      }
      
      public override PushMMPAppMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushMMPAppMessage) {
          return MergeFrom((PushMMPAppMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushMMPAppMessage other) {
        if (other == global::com.gexin.rp.sdk.dto.PushMMPAppMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        if (other.appIdList_.Count != 0) {
          result.appIdList_.Add(other.appIdList_);
        }
        if (other.phoneTypeList_.Count != 0) {
          result.phoneTypeList_.Add(other.phoneTypeList_);
        }
        if (other.provinceList_.Count != 0) {
          result.provinceList_.Add(other.provinceList_);
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushMMPAppMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushMMPAppMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.gexin.rp.sdk.dto.MMPMessage.Builder subBuilder = global::com.gexin.rp.sdk.dto.MMPMessage.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.appIdList_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.phoneTypeList_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.provinceList_);
              break;
            }
            case 42: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::com.gexin.rp.sdk.dto.MMPMessage Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.MMPMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::com.gexin.rp.sdk.dto.MMPMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::com.gexin.rp.sdk.dto.MMPMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance) {
            result.message_ = global::com.gexin.rp.sdk.dto.MMPMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<string> AppIdListList {
        get { return PrepareBuilder().appIdList_; }
      }
      public int AppIdListCount {
        get { return result.AppIdListCount; }
      }
      public string GetAppIdList(int index) {
        return result.GetAppIdList(index);
      }
      public Builder SetAppIdList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.appIdList_[index] = value;
        return this;
      }
      public Builder AddAppIdList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.appIdList_.Add(value);
        return this;
      }
      public Builder AddRangeAppIdList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.appIdList_.Add(values);
        return this;
      }
      public Builder ClearAppIdList() {
        PrepareBuilder();
        result.appIdList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> PhoneTypeListList {
        get { return PrepareBuilder().phoneTypeList_; }
      }
      public int PhoneTypeListCount {
        get { return result.PhoneTypeListCount; }
      }
      public string GetPhoneTypeList(int index) {
        return result.GetPhoneTypeList(index);
      }
      public Builder SetPhoneTypeList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.phoneTypeList_[index] = value;
        return this;
      }
      public Builder AddPhoneTypeList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.phoneTypeList_.Add(value);
        return this;
      }
      public Builder AddRangePhoneTypeList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.phoneTypeList_.Add(values);
        return this;
      }
      public Builder ClearPhoneTypeList() {
        PrepareBuilder();
        result.phoneTypeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ProvinceListList {
        get { return PrepareBuilder().provinceList_; }
      }
      public int ProvinceListCount {
        get { return result.ProvinceListCount; }
      }
      public string GetProvinceList(int index) {
        return result.GetProvinceList(index);
      }
      public Builder SetProvinceList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.provinceList_[index] = value;
        return this;
      }
      public Builder AddProvinceList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.provinceList_.Add(value);
        return this;
      }
      public Builder AddRangeProvinceList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.provinceList_.Add(values);
        return this;
      }
      public Builder ClearProvinceList() {
        PrepareBuilder();
        result.provinceList_.Clear();
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
    }
    static PushMMPAppMessage() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServerNotify : pb::GeneratedMessage<ServerNotify, ServerNotify.Builder> {
    private ServerNotify() { }
    private static readonly ServerNotify defaultInstance = new ServerNotify().MakeReadOnly();
    private static readonly string[] _serverNotifyFieldNames = new string[] { "extradata", "info", "seqId", "type" };
    private static readonly uint[] _serverNotifyFieldTags = new uint[] { 26, 18, 34, 8 };
    public static ServerNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ServerNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerNotify, ServerNotify.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ServerNotify__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum NotifyType {
        normal = 0,
        serverListChanged = 1,
        exception = 2,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::com.gexin.rp.sdk.dto.ServerNotify.Types.NotifyType type_ = global::com.gexin.rp.sdk.dto.ServerNotify.Types.NotifyType.normal;
    public bool HasType {
      get { return hasType; }
    }
    public global::com.gexin.rp.sdk.dto.ServerNotify.Types.NotifyType Type {
      get { return type_; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public const int ExtradataFieldNumber = 3;
    private bool hasExtradata;
    private pb::ByteString extradata_ = pb::ByteString.Empty;
    public bool HasExtradata {
      get { return hasExtradata; }
    }
    public pb::ByteString Extradata {
      get { return extradata_; }
    }
    
    public const int SeqIdFieldNumber = 4;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverNotifyFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[3], (int) Type, Type);
      }
      if (hasInfo) {
        output.WriteString(2, field_names[1], Info);
      }
      if (hasExtradata) {
        output.WriteBytes(3, field_names[0], Extradata);
      }
      if (hasSeqId) {
        output.WriteString(4, field_names[2], SeqId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Info);
        }
        if (hasExtradata) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Extradata);
        }
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SeqId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerNotify result;
      
      private ServerNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerNotify original = result;
          result = new ServerNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.ServerNotify.Descriptor; }
      }
      
      public override ServerNotify DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.ServerNotify.DefaultInstance; }
      }
      
      public override ServerNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerNotify) {
          return MergeFrom((ServerNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerNotify other) {
        if (other == global::com.gexin.rp.sdk.dto.ServerNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        if (other.HasExtradata) {
          Extradata = other.Extradata;
        }
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
            case 26: {
              result.hasExtradata = input.ReadBytes(ref result.extradata_);
              break;
            }
            case 34: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::com.gexin.rp.sdk.dto.ServerNotify.Types.NotifyType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::com.gexin.rp.sdk.dto.ServerNotify.Types.NotifyType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::com.gexin.rp.sdk.dto.ServerNotify.Types.NotifyType.normal;
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
      
      public bool HasExtradata {
        get { return result.hasExtradata; }
      }
      public pb::ByteString Extradata {
        get { return result.Extradata; }
        set { SetExtradata(value); }
      }
      public Builder SetExtradata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtradata = true;
        result.extradata_ = value;
        return this;
      }
      public Builder ClearExtradata() {
        PrepareBuilder();
        result.hasExtradata = false;
        result.extradata_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
    }
    static ServerNotify() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServerNotifyResult : pb::GeneratedMessage<ServerNotifyResult, ServerNotifyResult.Builder> {
    private ServerNotifyResult() { }
    private static readonly ServerNotifyResult defaultInstance = new ServerNotifyResult().MakeReadOnly();
    private static readonly string[] _serverNotifyResultFieldNames = new string[] { "info", "seqId" };
    private static readonly uint[] _serverNotifyResultFieldTags = new uint[] { 18, 10 };
    public static ServerNotifyResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerNotifyResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerNotifyResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerNotifyResult, ServerNotifyResult.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ServerNotifyResult__FieldAccessorTable; }
    }
    
    public const int SeqIdFieldNumber = 1;
    private bool hasSeqId;
    private string seqId_ = "";
    public bool HasSeqId {
      get { return hasSeqId; }
    }
    public string SeqId {
      get { return seqId_; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeqId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverNotifyResultFieldNames;
      if (hasSeqId) {
        output.WriteString(1, field_names[1], SeqId);
      }
      if (hasInfo) {
        output.WriteString(2, field_names[0], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SeqId);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerNotifyResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerNotifyResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerNotifyResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerNotifyResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerNotifyResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerNotifyResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerNotifyResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerNotifyResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerNotifyResult result;
      
      private ServerNotifyResult PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerNotifyResult original = result;
          result = new ServerNotifyResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerNotifyResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.ServerNotifyResult.Descriptor; }
      }
      
      public override ServerNotifyResult DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.ServerNotifyResult.DefaultInstance; }
      }
      
      public override ServerNotifyResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerNotifyResult) {
          return MergeFrom((ServerNotifyResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerNotifyResult other) {
        if (other == global::com.gexin.rp.sdk.dto.ServerNotifyResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqId) {
          SeqId = other.SeqId;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverNotifyResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverNotifyResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeqId = input.ReadString(ref result.seqId_);
              break;
            }
            case 18: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqId {
        get { return result.hasSeqId; }
      }
      public string SeqId {
        get { return result.SeqId; }
        set { SetSeqId(value); }
      }
      public Builder SetSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeqId = true;
        result.seqId_ = value;
        return this;
      }
      public Builder ClearSeqId() {
        PrepareBuilder();
        result.hasSeqId = false;
        result.seqId_ = "";
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
    }
    static ServerNotifyResult() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OSMessage : pb::GeneratedMessage<OSMessage, OSMessage.Builder> {
    private OSMessage() { }
    private static readonly OSMessage defaultInstance = new OSMessage().MakeReadOnly();
    private static readonly string[] _oSMessageFieldNames = new string[] { "extraData", "isOffline", "msgTraceFlag", "msgType", "offlineExpireTime", "priority", "transparent" };
    private static readonly uint[] _oSMessageFieldTags = new uint[] { 42, 16, 56, 48, 24, 64, 34 };
    public static OSMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OSMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OSMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_OSMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OSMessage, OSMessage.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_OSMessage__FieldAccessorTable; }
    }
    
    public const int IsOfflineFieldNumber = 2;
    private bool hasIsOffline;
    private bool isOffline_;
    public bool HasIsOffline {
      get { return hasIsOffline; }
    }
    public bool IsOffline {
      get { return isOffline_; }
    }
    
    public const int OfflineExpireTimeFieldNumber = 3;
    private bool hasOfflineExpireTime;
    private long offlineExpireTime_ = 1L;
    public bool HasOfflineExpireTime {
      get { return hasOfflineExpireTime; }
    }
    public long OfflineExpireTime {
      get { return offlineExpireTime_; }
    }
    
    public const int TransparentFieldNumber = 4;
    private bool hasTransparent;
    private global::com.gexin.rp.sdk.dto.Transparent transparent_;
    public bool HasTransparent {
      get { return hasTransparent; }
    }
    public global::com.gexin.rp.sdk.dto.Transparent Transparent {
      get { return transparent_ ?? global::com.gexin.rp.sdk.dto.Transparent.DefaultInstance; }
    }
    
    public const int ExtraDataFieldNumber = 5;
    private bool hasExtraData;
    private string extraData_ = "";
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public string ExtraData {
      get { return extraData_; }
    }
    
    public const int MsgTypeFieldNumber = 6;
    private bool hasMsgType;
    private int msgType_;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public int MsgType {
      get { return msgType_; }
    }
    
    public const int MsgTraceFlagFieldNumber = 7;
    private bool hasMsgTraceFlag;
    private int msgTraceFlag_;
    public bool HasMsgTraceFlag {
      get { return hasMsgTraceFlag; }
    }
    public int MsgTraceFlag {
      get { return msgTraceFlag_; }
    }
    
    public const int PriorityFieldNumber = 8;
    private bool hasPriority;
    private int priority_;
    public bool HasPriority {
      get { return hasPriority; }
    }
    public int Priority {
      get { return priority_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsOffline) return false;
        if (!hasOfflineExpireTime) return false;
        if (HasTransparent) {
          if (!Transparent.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _oSMessageFieldNames;
      if (hasIsOffline) {
        output.WriteBool(2, field_names[1], IsOffline);
      }
      if (hasOfflineExpireTime) {
        output.WriteInt64(3, field_names[4], OfflineExpireTime);
      }
      if (hasTransparent) {
        output.WriteMessage(4, field_names[6], Transparent);
      }
      if (hasExtraData) {
        output.WriteString(5, field_names[0], ExtraData);
      }
      if (hasMsgType) {
        output.WriteInt32(6, field_names[3], MsgType);
      }
      if (hasMsgTraceFlag) {
        output.WriteInt32(7, field_names[2], MsgTraceFlag);
      }
      if (hasPriority) {
        output.WriteInt32(8, field_names[5], Priority);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsOffline) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsOffline);
        }
        if (hasOfflineExpireTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, OfflineExpireTime);
        }
        if (hasTransparent) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Transparent);
        }
        if (hasExtraData) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ExtraData);
        }
        if (hasMsgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, MsgType);
        }
        if (hasMsgTraceFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, MsgTraceFlag);
        }
        if (hasPriority) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Priority);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OSMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OSMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OSMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OSMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OSMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OSMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OSMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OSMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OSMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OSMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OSMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OSMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OSMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OSMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OSMessage result;
      
      private OSMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          OSMessage original = result;
          result = new OSMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OSMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.OSMessage.Descriptor; }
      }
      
      public override OSMessage DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.OSMessage.DefaultInstance; }
      }
      
      public override OSMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OSMessage) {
          return MergeFrom((OSMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OSMessage other) {
        if (other == global::com.gexin.rp.sdk.dto.OSMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOffline) {
          IsOffline = other.IsOffline;
        }
        if (other.HasOfflineExpireTime) {
          OfflineExpireTime = other.OfflineExpireTime;
        }
        if (other.HasTransparent) {
          MergeTransparent(other.Transparent);
        }
        if (other.HasExtraData) {
          ExtraData = other.ExtraData;
        }
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasMsgTraceFlag) {
          MsgTraceFlag = other.MsgTraceFlag;
        }
        if (other.HasPriority) {
          Priority = other.Priority;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_oSMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _oSMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasIsOffline = input.ReadBool(ref result.isOffline_);
              break;
            }
            case 24: {
              result.hasOfflineExpireTime = input.ReadInt64(ref result.offlineExpireTime_);
              break;
            }
            case 34: {
              global::com.gexin.rp.sdk.dto.Transparent.Builder subBuilder = global::com.gexin.rp.sdk.dto.Transparent.CreateBuilder();
              if (result.hasTransparent) {
                subBuilder.MergeFrom(Transparent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Transparent = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              result.hasExtraData = input.ReadString(ref result.extraData_);
              break;
            }
            case 48: {
              result.hasMsgType = input.ReadInt32(ref result.msgType_);
              break;
            }
            case 56: {
              result.hasMsgTraceFlag = input.ReadInt32(ref result.msgTraceFlag_);
              break;
            }
            case 64: {
              result.hasPriority = input.ReadInt32(ref result.priority_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOffline {
        get { return result.hasIsOffline; }
      }
      public bool IsOffline {
        get { return result.IsOffline; }
        set { SetIsOffline(value); }
      }
      public Builder SetIsOffline(bool value) {
        PrepareBuilder();
        result.hasIsOffline = true;
        result.isOffline_ = value;
        return this;
      }
      public Builder ClearIsOffline() {
        PrepareBuilder();
        result.hasIsOffline = false;
        result.isOffline_ = false;
        return this;
      }
      
      public bool HasOfflineExpireTime {
        get { return result.hasOfflineExpireTime; }
      }
      public long OfflineExpireTime {
        get { return result.OfflineExpireTime; }
        set { SetOfflineExpireTime(value); }
      }
      public Builder SetOfflineExpireTime(long value) {
        PrepareBuilder();
        result.hasOfflineExpireTime = true;
        result.offlineExpireTime_ = value;
        return this;
      }
      public Builder ClearOfflineExpireTime() {
        PrepareBuilder();
        result.hasOfflineExpireTime = false;
        result.offlineExpireTime_ = 1L;
        return this;
      }
      
      public bool HasTransparent {
       get { return result.hasTransparent; }
      }
      public global::com.gexin.rp.sdk.dto.Transparent Transparent {
        get { return result.Transparent; }
        set { SetTransparent(value); }
      }
      public Builder SetTransparent(global::com.gexin.rp.sdk.dto.Transparent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransparent = true;
        result.transparent_ = value;
        return this;
      }
      public Builder SetTransparent(global::com.gexin.rp.sdk.dto.Transparent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransparent = true;
        result.transparent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransparent(global::com.gexin.rp.sdk.dto.Transparent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransparent &&
            result.transparent_ != global::com.gexin.rp.sdk.dto.Transparent.DefaultInstance) {
            result.transparent_ = global::com.gexin.rp.sdk.dto.Transparent.CreateBuilder(result.transparent_).MergeFrom(value).BuildPartial();
        } else {
          result.transparent_ = value;
        }
        result.hasTransparent = true;
        return this;
      }
      public Builder ClearTransparent() {
        PrepareBuilder();
        result.hasTransparent = false;
        result.transparent_ = null;
        return this;
      }
      
      public bool HasExtraData {
        get { return result.hasExtraData; }
      }
      public string ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        PrepareBuilder();
        result.hasExtraData = false;
        result.extraData_ = "";
        return this;
      }
      
      public bool HasMsgType {
        get { return result.hasMsgType; }
      }
      public int MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(int value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = 0;
        return this;
      }
      
      public bool HasMsgTraceFlag {
        get { return result.hasMsgTraceFlag; }
      }
      public int MsgTraceFlag {
        get { return result.MsgTraceFlag; }
        set { SetMsgTraceFlag(value); }
      }
      public Builder SetMsgTraceFlag(int value) {
        PrepareBuilder();
        result.hasMsgTraceFlag = true;
        result.msgTraceFlag_ = value;
        return this;
      }
      public Builder ClearMsgTraceFlag() {
        PrepareBuilder();
        result.hasMsgTraceFlag = false;
        result.msgTraceFlag_ = 0;
        return this;
      }
      
      public bool HasPriority {
        get { return result.hasPriority; }
      }
      public int Priority {
        get { return result.Priority; }
        set { SetPriority(value); }
      }
      public Builder SetPriority(int value) {
        PrepareBuilder();
        result.hasPriority = true;
        result.priority_ = value;
        return this;
      }
      public Builder ClearPriority() {
        PrepareBuilder();
        result.hasPriority = false;
        result.priority_ = 0;
        return this;
      }
    }
    static OSMessage() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MMPMessage : pb::GeneratedMessage<MMPMessage, MMPMessage.Builder> {
    private MMPMessage() { }
    private static readonly MMPMessage defaultInstance = new MMPMessage().MakeReadOnly();
    private static readonly string[] _mMPMessageFieldNames = new string[] { "extraData", "isOffline", "msgOfflineExpire", "msgTraceFlag", "msgType", "priority", "transparent" };
    private static readonly uint[] _mMPMessageFieldTags = new uint[] { 26, 56, 48, 40, 32, 64, 18 };
    public static MMPMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MMPMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MMPMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_MMPMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MMPMessage, MMPMessage.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_MMPMessage__FieldAccessorTable; }
    }
    
    public const int TransparentFieldNumber = 2;
    private bool hasTransparent;
    private global::com.gexin.rp.sdk.dto.Transparent transparent_;
    public bool HasTransparent {
      get { return hasTransparent; }
    }
    public global::com.gexin.rp.sdk.dto.Transparent Transparent {
      get { return transparent_ ?? global::com.gexin.rp.sdk.dto.Transparent.DefaultInstance; }
    }
    
    public const int ExtraDataFieldNumber = 3;
    private bool hasExtraData;
    private string extraData_ = "";
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public string ExtraData {
      get { return extraData_; }
    }
    
    public const int MsgTypeFieldNumber = 4;
    private bool hasMsgType;
    private int msgType_;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public int MsgType {
      get { return msgType_; }
    }
    
    public const int MsgTraceFlagFieldNumber = 5;
    private bool hasMsgTraceFlag;
    private int msgTraceFlag_;
    public bool HasMsgTraceFlag {
      get { return hasMsgTraceFlag; }
    }
    public int MsgTraceFlag {
      get { return msgTraceFlag_; }
    }
    
    public const int MsgOfflineExpireFieldNumber = 6;
    private bool hasMsgOfflineExpire;
    private long msgOfflineExpire_;
    public bool HasMsgOfflineExpire {
      get { return hasMsgOfflineExpire; }
    }
    public long MsgOfflineExpire {
      get { return msgOfflineExpire_; }
    }
    
    public const int IsOfflineFieldNumber = 7;
    private bool hasIsOffline;
    private bool isOffline_ = true;
    public bool HasIsOffline {
      get { return hasIsOffline; }
    }
    public bool IsOffline {
      get { return isOffline_; }
    }
    
    public const int PriorityFieldNumber = 8;
    private bool hasPriority;
    private int priority_;
    public bool HasPriority {
      get { return hasPriority; }
    }
    public int Priority {
      get { return priority_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasTransparent) {
          if (!Transparent.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mMPMessageFieldNames;
      if (hasTransparent) {
        output.WriteMessage(2, field_names[6], Transparent);
      }
      if (hasExtraData) {
        output.WriteString(3, field_names[0], ExtraData);
      }
      if (hasMsgType) {
        output.WriteInt32(4, field_names[4], MsgType);
      }
      if (hasMsgTraceFlag) {
        output.WriteInt32(5, field_names[3], MsgTraceFlag);
      }
      if (hasMsgOfflineExpire) {
        output.WriteInt64(6, field_names[2], MsgOfflineExpire);
      }
      if (hasIsOffline) {
        output.WriteBool(7, field_names[1], IsOffline);
      }
      if (hasPriority) {
        output.WriteInt32(8, field_names[5], Priority);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTransparent) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Transparent);
        }
        if (hasExtraData) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ExtraData);
        }
        if (hasMsgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, MsgType);
        }
        if (hasMsgTraceFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, MsgTraceFlag);
        }
        if (hasMsgOfflineExpire) {
          size += pb::CodedOutputStream.ComputeInt64Size(6, MsgOfflineExpire);
        }
        if (hasIsOffline) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, IsOffline);
        }
        if (hasPriority) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Priority);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MMPMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMPMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMPMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMPMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMPMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMPMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MMPMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MMPMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MMPMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMPMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MMPMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MMPMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MMPMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MMPMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MMPMessage result;
      
      private MMPMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          MMPMessage original = result;
          result = new MMPMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MMPMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.MMPMessage.Descriptor; }
      }
      
      public override MMPMessage DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance; }
      }
      
      public override MMPMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MMPMessage) {
          return MergeFrom((MMPMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MMPMessage other) {
        if (other == global::com.gexin.rp.sdk.dto.MMPMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTransparent) {
          MergeTransparent(other.Transparent);
        }
        if (other.HasExtraData) {
          ExtraData = other.ExtraData;
        }
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasMsgTraceFlag) {
          MsgTraceFlag = other.MsgTraceFlag;
        }
        if (other.HasMsgOfflineExpire) {
          MsgOfflineExpire = other.MsgOfflineExpire;
        }
        if (other.HasIsOffline) {
          IsOffline = other.IsOffline;
        }
        if (other.HasPriority) {
          Priority = other.Priority;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mMPMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mMPMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              global::com.gexin.rp.sdk.dto.Transparent.Builder subBuilder = global::com.gexin.rp.sdk.dto.Transparent.CreateBuilder();
              if (result.hasTransparent) {
                subBuilder.MergeFrom(Transparent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Transparent = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasExtraData = input.ReadString(ref result.extraData_);
              break;
            }
            case 32: {
              result.hasMsgType = input.ReadInt32(ref result.msgType_);
              break;
            }
            case 40: {
              result.hasMsgTraceFlag = input.ReadInt32(ref result.msgTraceFlag_);
              break;
            }
            case 48: {
              result.hasMsgOfflineExpire = input.ReadInt64(ref result.msgOfflineExpire_);
              break;
            }
            case 56: {
              result.hasIsOffline = input.ReadBool(ref result.isOffline_);
              break;
            }
            case 64: {
              result.hasPriority = input.ReadInt32(ref result.priority_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTransparent {
       get { return result.hasTransparent; }
      }
      public global::com.gexin.rp.sdk.dto.Transparent Transparent {
        get { return result.Transparent; }
        set { SetTransparent(value); }
      }
      public Builder SetTransparent(global::com.gexin.rp.sdk.dto.Transparent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransparent = true;
        result.transparent_ = value;
        return this;
      }
      public Builder SetTransparent(global::com.gexin.rp.sdk.dto.Transparent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransparent = true;
        result.transparent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransparent(global::com.gexin.rp.sdk.dto.Transparent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransparent &&
            result.transparent_ != global::com.gexin.rp.sdk.dto.Transparent.DefaultInstance) {
            result.transparent_ = global::com.gexin.rp.sdk.dto.Transparent.CreateBuilder(result.transparent_).MergeFrom(value).BuildPartial();
        } else {
          result.transparent_ = value;
        }
        result.hasTransparent = true;
        return this;
      }
      public Builder ClearTransparent() {
        PrepareBuilder();
        result.hasTransparent = false;
        result.transparent_ = null;
        return this;
      }
      
      public bool HasExtraData {
        get { return result.hasExtraData; }
      }
      public string ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        PrepareBuilder();
        result.hasExtraData = false;
        result.extraData_ = "";
        return this;
      }
      
      public bool HasMsgType {
        get { return result.hasMsgType; }
      }
      public int MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(int value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = 0;
        return this;
      }
      
      public bool HasMsgTraceFlag {
        get { return result.hasMsgTraceFlag; }
      }
      public int MsgTraceFlag {
        get { return result.MsgTraceFlag; }
        set { SetMsgTraceFlag(value); }
      }
      public Builder SetMsgTraceFlag(int value) {
        PrepareBuilder();
        result.hasMsgTraceFlag = true;
        result.msgTraceFlag_ = value;
        return this;
      }
      public Builder ClearMsgTraceFlag() {
        PrepareBuilder();
        result.hasMsgTraceFlag = false;
        result.msgTraceFlag_ = 0;
        return this;
      }
      
      public bool HasMsgOfflineExpire {
        get { return result.hasMsgOfflineExpire; }
      }
      public long MsgOfflineExpire {
        get { return result.MsgOfflineExpire; }
        set { SetMsgOfflineExpire(value); }
      }
      public Builder SetMsgOfflineExpire(long value) {
        PrepareBuilder();
        result.hasMsgOfflineExpire = true;
        result.msgOfflineExpire_ = value;
        return this;
      }
      public Builder ClearMsgOfflineExpire() {
        PrepareBuilder();
        result.hasMsgOfflineExpire = false;
        result.msgOfflineExpire_ = 0L;
        return this;
      }
      
      public bool HasIsOffline {
        get { return result.hasIsOffline; }
      }
      public bool IsOffline {
        get { return result.IsOffline; }
        set { SetIsOffline(value); }
      }
      public Builder SetIsOffline(bool value) {
        PrepareBuilder();
        result.hasIsOffline = true;
        result.isOffline_ = value;
        return this;
      }
      public Builder ClearIsOffline() {
        PrepareBuilder();
        result.hasIsOffline = false;
        result.isOffline_ = true;
        return this;
      }
      
      public bool HasPriority {
        get { return result.hasPriority; }
      }
      public int Priority {
        get { return result.Priority; }
        set { SetPriority(value); }
      }
      public Builder SetPriority(int value) {
        PrepareBuilder();
        result.hasPriority = true;
        result.priority_ = value;
        return this;
      }
      public Builder ClearPriority() {
        PrepareBuilder();
        result.hasPriority = false;
        result.priority_ = 0;
        return this;
      }
    }
    static MMPMessage() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Transparent : pb::GeneratedMessage<Transparent, Transparent.Builder> {
    private Transparent() { }
    private static readonly Transparent defaultInstance = new Transparent().MakeReadOnly();
    private static readonly string[] _transparentFieldNames = new string[] { "action", "actionChain", "appId", "appKey", "id", "messageId", "pushInfo", "taskId" };
    private static readonly uint[] _transparentFieldTags = new uint[] { 18, 66, 42, 34, 10, 50, 58, 26 };
    public static Transparent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Transparent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Transparent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_Transparent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Transparent, Transparent.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_Transparent__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ActionFieldNumber = 2;
    private bool hasAction;
    private string action_ = "";
    public bool HasAction {
      get { return hasAction; }
    }
    public string Action {
      get { return action_; }
    }
    
    public const int TaskIdFieldNumber = 3;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int AppKeyFieldNumber = 4;
    private bool hasAppKey;
    private string appKey_ = "";
    public bool HasAppKey {
      get { return hasAppKey; }
    }
    public string AppKey {
      get { return appKey_; }
    }
    
    public const int AppIdFieldNumber = 5;
    private bool hasAppId;
    private string appId_ = "";
    public bool HasAppId {
      get { return hasAppId; }
    }
    public string AppId {
      get { return appId_; }
    }
    
    public const int MessageIdFieldNumber = 6;
    private bool hasMessageId;
    private string messageId_ = "";
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public string MessageId {
      get { return messageId_; }
    }
    
    public const int PushInfoFieldNumber = 7;
    private bool hasPushInfo;
    private global::com.gexin.rp.sdk.dto.PushInfo pushInfo_;
    public bool HasPushInfo {
      get { return hasPushInfo; }
    }
    public global::com.gexin.rp.sdk.dto.PushInfo PushInfo {
      get { return pushInfo_ ?? global::com.gexin.rp.sdk.dto.PushInfo.DefaultInstance; }
    }
    
    public const int ActionChainFieldNumber = 8;
    private pbc::PopsicleList<global::com.gexin.rp.sdk.dto.ActionChain> actionChain_ = new pbc::PopsicleList<global::com.gexin.rp.sdk.dto.ActionChain>();
    public scg::IList<global::com.gexin.rp.sdk.dto.ActionChain> ActionChainList {
      get { return actionChain_; }
    }
    public int ActionChainCount {
      get { return actionChain_.Count; }
    }
    public global::com.gexin.rp.sdk.dto.ActionChain GetActionChain(int index) {
      return actionChain_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasAction) return false;
        if (!hasTaskId) return false;
        if (!hasAppKey) return false;
        if (!hasAppId) return false;
        if (!hasMessageId) return false;
        foreach (global::com.gexin.rp.sdk.dto.ActionChain element in ActionChainList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _transparentFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[4], Id);
      }
      if (hasAction) {
        output.WriteString(2, field_names[0], Action);
      }
      if (hasTaskId) {
        output.WriteString(3, field_names[7], TaskId);
      }
      if (hasAppKey) {
        output.WriteString(4, field_names[3], AppKey);
      }
      if (hasAppId) {
        output.WriteString(5, field_names[2], AppId);
      }
      if (hasMessageId) {
        output.WriteString(6, field_names[5], MessageId);
      }
      if (hasPushInfo) {
        output.WriteMessage(7, field_names[6], PushInfo);
      }
      if (actionChain_.Count > 0) {
        output.WriteMessageArray(8, field_names[1], actionChain_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasAction) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Action);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, TaskId);
        }
        if (hasAppKey) {
          size += pb::CodedOutputStream.ComputeStringSize(4, AppKey);
        }
        if (hasAppId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, AppId);
        }
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, MessageId);
        }
        if (hasPushInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PushInfo);
        }
        foreach (global::com.gexin.rp.sdk.dto.ActionChain element in ActionChainList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Transparent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Transparent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Transparent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Transparent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Transparent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Transparent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Transparent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Transparent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Transparent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Transparent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Transparent MakeReadOnly() {
      actionChain_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Transparent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Transparent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Transparent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Transparent result;
      
      private Transparent PrepareBuilder() {
        if (resultIsReadOnly) {
          Transparent original = result;
          result = new Transparent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Transparent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.Transparent.Descriptor; }
      }
      
      public override Transparent DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.Transparent.DefaultInstance; }
      }
      
      public override Transparent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Transparent) {
          return MergeFrom((Transparent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Transparent other) {
        if (other == global::com.gexin.rp.sdk.dto.Transparent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAction) {
          Action = other.Action;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasAppKey) {
          AppKey = other.AppKey;
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasPushInfo) {
          MergePushInfo(other.PushInfo);
        }
        if (other.actionChain_.Count != 0) {
          result.actionChain_.Add(other.actionChain_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transparentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transparentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasAction = input.ReadString(ref result.action_);
              break;
            }
            case 26: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 34: {
              result.hasAppKey = input.ReadString(ref result.appKey_);
              break;
            }
            case 42: {
              result.hasAppId = input.ReadString(ref result.appId_);
              break;
            }
            case 50: {
              result.hasMessageId = input.ReadString(ref result.messageId_);
              break;
            }
            case 58: {
              global::com.gexin.rp.sdk.dto.PushInfo.Builder subBuilder = global::com.gexin.rp.sdk.dto.PushInfo.CreateBuilder();
              if (result.hasPushInfo) {
                subBuilder.MergeFrom(PushInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PushInfo = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.actionChain_, global::com.gexin.rp.sdk.dto.ActionChain.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasAction {
        get { return result.hasAction; }
      }
      public string Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.hasAction = false;
        result.action_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public bool HasAppKey {
        get { return result.hasAppKey; }
      }
      public string AppKey {
        get { return result.AppKey; }
        set { SetAppKey(value); }
      }
      public Builder SetAppKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppKey = true;
        result.appKey_ = value;
        return this;
      }
      public Builder ClearAppKey() {
        PrepareBuilder();
        result.hasAppKey = false;
        result.appKey_ = "";
        return this;
      }
      
      public bool HasAppId {
        get { return result.hasAppId; }
      }
      public string AppId {
        get { return result.AppId; }
        set { SetAppId(value); }
      }
      public Builder SetAppId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppId = true;
        result.appId_ = value;
        return this;
      }
      public Builder ClearAppId() {
        PrepareBuilder();
        result.hasAppId = false;
        result.appId_ = "";
        return this;
      }
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public string MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = "";
        return this;
      }
      
      public bool HasPushInfo {
       get { return result.hasPushInfo; }
      }
      public global::com.gexin.rp.sdk.dto.PushInfo PushInfo {
        get { return result.PushInfo; }
        set { SetPushInfo(value); }
      }
      public Builder SetPushInfo(global::com.gexin.rp.sdk.dto.PushInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPushInfo = true;
        result.pushInfo_ = value;
        return this;
      }
      public Builder SetPushInfo(global::com.gexin.rp.sdk.dto.PushInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPushInfo = true;
        result.pushInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergePushInfo(global::com.gexin.rp.sdk.dto.PushInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPushInfo &&
            result.pushInfo_ != global::com.gexin.rp.sdk.dto.PushInfo.DefaultInstance) {
            result.pushInfo_ = global::com.gexin.rp.sdk.dto.PushInfo.CreateBuilder(result.pushInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.pushInfo_ = value;
        }
        result.hasPushInfo = true;
        return this;
      }
      public Builder ClearPushInfo() {
        PrepareBuilder();
        result.hasPushInfo = false;
        result.pushInfo_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.gexin.rp.sdk.dto.ActionChain> ActionChainList {
        get { return PrepareBuilder().actionChain_; }
      }
      public int ActionChainCount {
        get { return result.ActionChainCount; }
      }
      public global::com.gexin.rp.sdk.dto.ActionChain GetActionChain(int index) {
        return result.GetActionChain(index);
      }
      public Builder SetActionChain(int index, global::com.gexin.rp.sdk.dto.ActionChain value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.actionChain_[index] = value;
        return this;
      }
      public Builder SetActionChain(int index, global::com.gexin.rp.sdk.dto.ActionChain.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.actionChain_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddActionChain(global::com.gexin.rp.sdk.dto.ActionChain value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.actionChain_.Add(value);
        return this;
      }
      public Builder AddActionChain(global::com.gexin.rp.sdk.dto.ActionChain.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.actionChain_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeActionChain(scg::IEnumerable<global::com.gexin.rp.sdk.dto.ActionChain> values) {
        PrepareBuilder();
        result.actionChain_.Add(values);
        return this;
      }
      public Builder ClearActionChain() {
        PrepareBuilder();
        result.actionChain_.Clear();
        return this;
      }
    }
    static Transparent() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PushInfo : pb::GeneratedMessage<PushInfo, PushInfo.Builder> {
    private PushInfo() { }
    private static readonly PushInfo defaultInstance = new PushInfo().MakeReadOnly();
    private static readonly string[] _pushInfoFieldNames = new string[] { "actionKey", "actionLocKey", "badge", "launchImage", "locArgs", "locKey", "message", "payload", "sound" };
    private static readonly uint[] _pushInfoFieldTags = new uint[] { 18, 66, 34, 74, 58, 50, 10, 42, 26 };
    public static PushInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PushInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PushInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PushInfo, PushInfo.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_PushInfo__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int ActionKeyFieldNumber = 2;
    private bool hasActionKey;
    private string actionKey_ = "";
    public bool HasActionKey {
      get { return hasActionKey; }
    }
    public string ActionKey {
      get { return actionKey_; }
    }
    
    public const int SoundFieldNumber = 3;
    private bool hasSound;
    private string sound_ = "";
    public bool HasSound {
      get { return hasSound; }
    }
    public string Sound {
      get { return sound_; }
    }
    
    public const int BadgeFieldNumber = 4;
    private bool hasBadge;
    private string badge_ = "";
    public bool HasBadge {
      get { return hasBadge; }
    }
    public string Badge {
      get { return badge_; }
    }
    
    public const int PayloadFieldNumber = 5;
    private bool hasPayload;
    private string payload_ = "";
    public bool HasPayload {
      get { return hasPayload; }
    }
    public string Payload {
      get { return payload_; }
    }
    
    public const int LocKeyFieldNumber = 6;
    private bool hasLocKey;
    private string locKey_ = "";
    public bool HasLocKey {
      get { return hasLocKey; }
    }
    public string LocKey {
      get { return locKey_; }
    }
    
    public const int LocArgsFieldNumber = 7;
    private bool hasLocArgs;
    private string locArgs_ = "";
    public bool HasLocArgs {
      get { return hasLocArgs; }
    }
    public string LocArgs {
      get { return locArgs_; }
    }
    
    public const int ActionLocKeyFieldNumber = 8;
    private bool hasActionLocKey;
    private string actionLocKey_ = "";
    public bool HasActionLocKey {
      get { return hasActionLocKey; }
    }
    public string ActionLocKey {
      get { return actionLocKey_; }
    }
    
    public const int LaunchImageFieldNumber = 9;
    private bool hasLaunchImage;
    private string launchImage_ = "";
    public bool HasLaunchImage {
      get { return hasLaunchImage; }
    }
    public string LaunchImage {
      get { return launchImage_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pushInfoFieldNames;
      if (hasMessage) {
        output.WriteString(1, field_names[6], Message);
      }
      if (hasActionKey) {
        output.WriteString(2, field_names[0], ActionKey);
      }
      if (hasSound) {
        output.WriteString(3, field_names[8], Sound);
      }
      if (hasBadge) {
        output.WriteString(4, field_names[2], Badge);
      }
      if (hasPayload) {
        output.WriteString(5, field_names[7], Payload);
      }
      if (hasLocKey) {
        output.WriteString(6, field_names[5], LocKey);
      }
      if (hasLocArgs) {
        output.WriteString(7, field_names[4], LocArgs);
      }
      if (hasActionLocKey) {
        output.WriteString(8, field_names[1], ActionLocKey);
      }
      if (hasLaunchImage) {
        output.WriteString(9, field_names[3], LaunchImage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Message);
        }
        if (hasActionKey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ActionKey);
        }
        if (hasSound) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Sound);
        }
        if (hasBadge) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Badge);
        }
        if (hasPayload) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Payload);
        }
        if (hasLocKey) {
          size += pb::CodedOutputStream.ComputeStringSize(6, LocKey);
        }
        if (hasLocArgs) {
          size += pb::CodedOutputStream.ComputeStringSize(7, LocArgs);
        }
        if (hasActionLocKey) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ActionLocKey);
        }
        if (hasLaunchImage) {
          size += pb::CodedOutputStream.ComputeStringSize(9, LaunchImage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PushInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PushInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PushInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PushInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PushInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PushInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PushInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PushInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PushInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PushInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PushInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PushInfo result;
      
      private PushInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PushInfo original = result;
          result = new PushInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PushInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.PushInfo.Descriptor; }
      }
      
      public override PushInfo DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.PushInfo.DefaultInstance; }
      }
      
      public override PushInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PushInfo) {
          return MergeFrom((PushInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PushInfo other) {
        if (other == global::com.gexin.rp.sdk.dto.PushInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasActionKey) {
          ActionKey = other.ActionKey;
        }
        if (other.HasSound) {
          Sound = other.Sound;
        }
        if (other.HasBadge) {
          Badge = other.Badge;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        if (other.HasLocKey) {
          LocKey = other.LocKey;
        }
        if (other.HasLocArgs) {
          LocArgs = other.LocArgs;
        }
        if (other.HasActionLocKey) {
          ActionLocKey = other.ActionLocKey;
        }
        if (other.HasLaunchImage) {
          LaunchImage = other.LaunchImage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pushInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pushInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
            case 18: {
              result.hasActionKey = input.ReadString(ref result.actionKey_);
              break;
            }
            case 26: {
              result.hasSound = input.ReadString(ref result.sound_);
              break;
            }
            case 34: {
              result.hasBadge = input.ReadString(ref result.badge_);
              break;
            }
            case 42: {
              result.hasPayload = input.ReadString(ref result.payload_);
              break;
            }
            case 50: {
              result.hasLocKey = input.ReadString(ref result.locKey_);
              break;
            }
            case 58: {
              result.hasLocArgs = input.ReadString(ref result.locArgs_);
              break;
            }
            case 66: {
              result.hasActionLocKey = input.ReadString(ref result.actionLocKey_);
              break;
            }
            case 74: {
              result.hasLaunchImage = input.ReadString(ref result.launchImage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasActionKey {
        get { return result.hasActionKey; }
      }
      public string ActionKey {
        get { return result.ActionKey; }
        set { SetActionKey(value); }
      }
      public Builder SetActionKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionKey = true;
        result.actionKey_ = value;
        return this;
      }
      public Builder ClearActionKey() {
        PrepareBuilder();
        result.hasActionKey = false;
        result.actionKey_ = "";
        return this;
      }
      
      public bool HasSound {
        get { return result.hasSound; }
      }
      public string Sound {
        get { return result.Sound; }
        set { SetSound(value); }
      }
      public Builder SetSound(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSound = true;
        result.sound_ = value;
        return this;
      }
      public Builder ClearSound() {
        PrepareBuilder();
        result.hasSound = false;
        result.sound_ = "";
        return this;
      }
      
      public bool HasBadge {
        get { return result.hasBadge; }
      }
      public string Badge {
        get { return result.Badge; }
        set { SetBadge(value); }
      }
      public Builder SetBadge(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBadge = true;
        result.badge_ = value;
        return this;
      }
      public Builder ClearBadge() {
        PrepareBuilder();
        result.hasBadge = false;
        result.badge_ = "";
        return this;
      }
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public string Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = "";
        return this;
      }
      
      public bool HasLocKey {
        get { return result.hasLocKey; }
      }
      public string LocKey {
        get { return result.LocKey; }
        set { SetLocKey(value); }
      }
      public Builder SetLocKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocKey = true;
        result.locKey_ = value;
        return this;
      }
      public Builder ClearLocKey() {
        PrepareBuilder();
        result.hasLocKey = false;
        result.locKey_ = "";
        return this;
      }
      
      public bool HasLocArgs {
        get { return result.hasLocArgs; }
      }
      public string LocArgs {
        get { return result.LocArgs; }
        set { SetLocArgs(value); }
      }
      public Builder SetLocArgs(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocArgs = true;
        result.locArgs_ = value;
        return this;
      }
      public Builder ClearLocArgs() {
        PrepareBuilder();
        result.hasLocArgs = false;
        result.locArgs_ = "";
        return this;
      }
      
      public bool HasActionLocKey {
        get { return result.hasActionLocKey; }
      }
      public string ActionLocKey {
        get { return result.ActionLocKey; }
        set { SetActionLocKey(value); }
      }
      public Builder SetActionLocKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionLocKey = true;
        result.actionLocKey_ = value;
        return this;
      }
      public Builder ClearActionLocKey() {
        PrepareBuilder();
        result.hasActionLocKey = false;
        result.actionLocKey_ = "";
        return this;
      }
      
      public bool HasLaunchImage {
        get { return result.hasLaunchImage; }
      }
      public string LaunchImage {
        get { return result.LaunchImage; }
        set { SetLaunchImage(value); }
      }
      public Builder SetLaunchImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLaunchImage = true;
        result.launchImage_ = value;
        return this;
      }
      public Builder ClearLaunchImage() {
        PrepareBuilder();
        result.hasLaunchImage = false;
        result.launchImage_ = "";
        return this;
      }
    }
    static PushInfo() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionChain : pb::GeneratedMessage<ActionChain, ActionChain.Builder> {
    private ActionChain() { }
    private static readonly ActionChain defaultInstance = new ActionChain().MakeReadOnly();
    private static readonly string[] _actionChainFieldNames = new string[] { "actionId", "address", "appid", "appstartupid", "autoInstall", "autostart", "bannerURL", "buttons", "buzz", "clearable", "content", "ct", "date", "duration", "failedAction", "flag", "forceDownload", "groupable", "headers", "img", "is_withnettype", "logo", "logoURL", "mmsTitle", "mmsURL", "name", "next", "post", "preload", "ring", "showProgress", "successedAction", "taskid", "text", "title", "type", "uninstalledAction", "url", "wifiAutodownload", "withcid" };
    private static readonly uint[] _actionChainFieldTags = new uint[] { 8, 1442, 1122, 1130, 1784, 1136, 858, 970, 848, 832, 1450, 1456, 2882, 2720, 1144, 1464, 1808, 2080, 1938, 962, 1296, 802, 810, 2242, 2250, 1762, 24, 1930, 2400, 840, 1816, 1600, 2562, 826, 818, 16, 1608, 1282, 1800, 1290 };
    public static ActionChain DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionChain DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionChain ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ActionChain__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionChain, ActionChain.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_ActionChain__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        Goto = 0,
        notification = 1,
        popup = 2,
        startapp = 3,
        startweb = 4,
        smsinbox = 5,
        checkapp = 6,
        eoa = 7,
        appdownload = 8,
        startsms = 9,
        httpproxy = 10,
        smsinbox2 = 11,
        mmsinbox2 = 12,
        popupweb = 13,
        dial = 14,
        reportbindapp = 15,
        reportaddphoneinfo = 16,
        reportapplist = 17,
        terminatetask = 18,
        reportapp = 19,
        enablelog = 20,
        disablelog = 21,
        uploadlog = 22,
      }
      
    }
    #endregion
    
    public const int ActionIdFieldNumber = 1;
    private bool hasActionId;
    private int actionId_;
    public bool HasActionId {
      get { return hasActionId; }
    }
    public int ActionId {
      get { return actionId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::com.gexin.rp.sdk.dto.ActionChain.Types.Type type_ = global::com.gexin.rp.sdk.dto.ActionChain.Types.Type.Goto;
    public bool HasType {
      get { return hasType; }
    }
    public global::com.gexin.rp.sdk.dto.ActionChain.Types.Type Type {
      get { return type_; }
    }
    
    public const int NextFieldNumber = 3;
    private bool hasNext;
    private int next_;
    public bool HasNext {
      get { return hasNext; }
    }
    public int Next {
      get { return next_; }
    }
    
    public const int LogoFieldNumber = 100;
    private bool hasLogo;
    private string logo_ = "";
    public bool HasLogo {
      get { return hasLogo; }
    }
    public string Logo {
      get { return logo_; }
    }
    
    public const int LogoURLFieldNumber = 101;
    private bool hasLogoURL;
    private string logoURL_ = "";
    public bool HasLogoURL {
      get { return hasLogoURL; }
    }
    public string LogoURL {
      get { return logoURL_; }
    }
    
    public const int TitleFieldNumber = 102;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int TextFieldNumber = 103;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int ClearableFieldNumber = 104;
    private bool hasClearable;
    private bool clearable_;
    public bool HasClearable {
      get { return hasClearable; }
    }
    public bool Clearable {
      get { return clearable_; }
    }
    
    public const int RingFieldNumber = 105;
    private bool hasRing;
    private bool ring_;
    public bool HasRing {
      get { return hasRing; }
    }
    public bool Ring {
      get { return ring_; }
    }
    
    public const int BuzzFieldNumber = 106;
    private bool hasBuzz;
    private bool buzz_;
    public bool HasBuzz {
      get { return hasBuzz; }
    }
    public bool Buzz {
      get { return buzz_; }
    }
    
    public const int BannerURLFieldNumber = 107;
    private bool hasBannerURL;
    private string bannerURL_ = "";
    public bool HasBannerURL {
      get { return hasBannerURL; }
    }
    public string BannerURL {
      get { return bannerURL_; }
    }
    
    public const int ImgFieldNumber = 120;
    private bool hasImg;
    private string img_ = "";
    public bool HasImg {
      get { return hasImg; }
    }
    public string Img {
      get { return img_; }
    }
    
    public const int ButtonsFieldNumber = 121;
    private pbc::PopsicleList<global::com.gexin.rp.sdk.dto.Button> buttons_ = new pbc::PopsicleList<global::com.gexin.rp.sdk.dto.Button>();
    public scg::IList<global::com.gexin.rp.sdk.dto.Button> ButtonsList {
      get { return buttons_; }
    }
    public int ButtonsCount {
      get { return buttons_.Count; }
    }
    public global::com.gexin.rp.sdk.dto.Button GetButtons(int index) {
      return buttons_[index];
    }
    
    public const int AppidFieldNumber = 140;
    private bool hasAppid;
    private string appid_ = "";
    public bool HasAppid {
      get { return hasAppid; }
    }
    public string Appid {
      get { return appid_; }
    }
    
    public const int AppstartupidFieldNumber = 141;
    private bool hasAppstartupid;
    private global::com.gexin.rp.sdk.dto.AppStartUp appstartupid_;
    public bool HasAppstartupid {
      get { return hasAppstartupid; }
    }
    public global::com.gexin.rp.sdk.dto.AppStartUp Appstartupid {
      get { return appstartupid_ ?? global::com.gexin.rp.sdk.dto.AppStartUp.DefaultInstance; }
    }
    
    public const int AutostartFieldNumber = 142;
    private bool hasAutostart;
    private bool autostart_;
    public bool HasAutostart {
      get { return hasAutostart; }
    }
    public bool Autostart {
      get { return autostart_; }
    }
    
    public const int FailedActionFieldNumber = 143;
    private bool hasFailedAction;
    private int failedAction_;
    public bool HasFailedAction {
      get { return hasFailedAction; }
    }
    public int FailedAction {
      get { return failedAction_; }
    }
    
    public const int UrlFieldNumber = 160;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int WithcidFieldNumber = 161;
    private bool hasWithcid;
    private string withcid_ = "";
    public bool HasWithcid {
      get { return hasWithcid; }
    }
    public string Withcid {
      get { return withcid_; }
    }
    
    public const int IsWithnettypeFieldNumber = 162;
    private bool hasIsWithnettype;
    private bool isWithnettype_;
    public bool HasIsWithnettype {
      get { return hasIsWithnettype; }
    }
    public bool IsWithnettype {
      get { return isWithnettype_; }
    }
    
    public const int AddressFieldNumber = 180;
    private bool hasAddress;
    private string address_ = "";
    public bool HasAddress {
      get { return hasAddress; }
    }
    public string Address {
      get { return address_; }
    }
    
    public const int ContentFieldNumber = 181;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int CtFieldNumber = 182;
    private bool hasCt;
    private long ct_;
    public bool HasCt {
      get { return hasCt; }
    }
    public long Ct {
      get { return ct_; }
    }
    
    public const int FlagFieldNumber = 183;
    private bool hasFlag;
    private global::com.gexin.rp.sdk.dto.SMSStatus flag_ = global::com.gexin.rp.sdk.dto.SMSStatus.unread;
    public bool HasFlag {
      get { return hasFlag; }
    }
    public global::com.gexin.rp.sdk.dto.SMSStatus Flag {
      get { return flag_; }
    }
    
    public const int SuccessedActionFieldNumber = 200;
    private bool hasSuccessedAction;
    private int successedAction_;
    public bool HasSuccessedAction {
      get { return hasSuccessedAction; }
    }
    public int SuccessedAction {
      get { return successedAction_; }
    }
    
    public const int UninstalledActionFieldNumber = 201;
    private bool hasUninstalledAction;
    private int uninstalledAction_;
    public bool HasUninstalledAction {
      get { return hasUninstalledAction; }
    }
    public int UninstalledAction {
      get { return uninstalledAction_; }
    }
    
    public const int NameFieldNumber = 220;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AutoInstallFieldNumber = 223;
    private bool hasAutoInstall;
    private bool autoInstall_;
    public bool HasAutoInstall {
      get { return hasAutoInstall; }
    }
    public bool AutoInstall {
      get { return autoInstall_; }
    }
    
    public const int WifiAutodownloadFieldNumber = 225;
    private bool hasWifiAutodownload;
    private bool wifiAutodownload_;
    public bool HasWifiAutodownload {
      get { return hasWifiAutodownload; }
    }
    public bool WifiAutodownload {
      get { return wifiAutodownload_; }
    }
    
    public const int ForceDownloadFieldNumber = 226;
    private bool hasForceDownload;
    private bool forceDownload_;
    public bool HasForceDownload {
      get { return hasForceDownload; }
    }
    public bool ForceDownload {
      get { return forceDownload_; }
    }
    
    public const int ShowProgressFieldNumber = 227;
    private bool hasShowProgress;
    private bool showProgress_;
    public bool HasShowProgress {
      get { return hasShowProgress; }
    }
    public bool ShowProgress {
      get { return showProgress_; }
    }
    
    public const int PostFieldNumber = 241;
    private bool hasPost;
    private string post_ = "";
    public bool HasPost {
      get { return hasPost; }
    }
    public string Post {
      get { return post_; }
    }
    
    public const int HeadersFieldNumber = 242;
    private bool hasHeaders;
    private string headers_ = "";
    public bool HasHeaders {
      get { return hasHeaders; }
    }
    public string Headers {
      get { return headers_; }
    }
    
    public const int GroupableFieldNumber = 260;
    private bool hasGroupable;
    private bool groupable_;
    public bool HasGroupable {
      get { return hasGroupable; }
    }
    public bool Groupable {
      get { return groupable_; }
    }
    
    public const int MmsTitleFieldNumber = 280;
    private bool hasMmsTitle;
    private string mmsTitle_ = "";
    public bool HasMmsTitle {
      get { return hasMmsTitle; }
    }
    public string MmsTitle {
      get { return mmsTitle_; }
    }
    
    public const int MmsURLFieldNumber = 281;
    private bool hasMmsURL;
    private string mmsURL_ = "";
    public bool HasMmsURL {
      get { return hasMmsURL; }
    }
    public string MmsURL {
      get { return mmsURL_; }
    }
    
    public const int PreloadFieldNumber = 300;
    private bool hasPreload;
    private bool preload_;
    public bool HasPreload {
      get { return hasPreload; }
    }
    public bool Preload {
      get { return preload_; }
    }
    
    public const int TaskidFieldNumber = 320;
    private bool hasTaskid;
    private string taskid_ = "";
    public bool HasTaskid {
      get { return hasTaskid; }
    }
    public string Taskid {
      get { return taskid_; }
    }
    
    public const int DurationFieldNumber = 340;
    private bool hasDuration;
    private long duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public long Duration {
      get { return duration_; }
    }
    
    public const int DateFieldNumber = 360;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasActionId) return false;
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _actionChainFieldNames;
      if (hasActionId) {
        output.WriteInt32(1, field_names[0], ActionId);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[35], (int) Type, Type);
      }
      if (hasNext) {
        output.WriteInt32(3, field_names[26], Next);
      }
      if (hasLogo) {
        output.WriteString(100, field_names[21], Logo);
      }
      if (hasLogoURL) {
        output.WriteString(101, field_names[22], LogoURL);
      }
      if (hasTitle) {
        output.WriteString(102, field_names[34], Title);
      }
      if (hasText) {
        output.WriteString(103, field_names[33], Text);
      }
      if (hasClearable) {
        output.WriteBool(104, field_names[9], Clearable);
      }
      if (hasRing) {
        output.WriteBool(105, field_names[29], Ring);
      }
      if (hasBuzz) {
        output.WriteBool(106, field_names[8], Buzz);
      }
      if (hasBannerURL) {
        output.WriteString(107, field_names[6], BannerURL);
      }
      if (hasImg) {
        output.WriteString(120, field_names[19], Img);
      }
      if (buttons_.Count > 0) {
        output.WriteMessageArray(121, field_names[7], buttons_);
      }
      if (hasAppid) {
        output.WriteString(140, field_names[2], Appid);
      }
      if (hasAppstartupid) {
        output.WriteMessage(141, field_names[3], Appstartupid);
      }
      if (hasAutostart) {
        output.WriteBool(142, field_names[5], Autostart);
      }
      if (hasFailedAction) {
        output.WriteInt32(143, field_names[14], FailedAction);
      }
      if (hasUrl) {
        output.WriteString(160, field_names[37], Url);
      }
      if (hasWithcid) {
        output.WriteString(161, field_names[39], Withcid);
      }
      if (hasIsWithnettype) {
        output.WriteBool(162, field_names[20], IsWithnettype);
      }
      if (hasAddress) {
        output.WriteString(180, field_names[1], Address);
      }
      if (hasContent) {
        output.WriteString(181, field_names[10], Content);
      }
      if (hasCt) {
        output.WriteInt64(182, field_names[11], Ct);
      }
      if (hasFlag) {
        output.WriteEnum(183, field_names[15], (int) Flag, Flag);
      }
      if (hasSuccessedAction) {
        output.WriteInt32(200, field_names[31], SuccessedAction);
      }
      if (hasUninstalledAction) {
        output.WriteInt32(201, field_names[36], UninstalledAction);
      }
      if (hasName) {
        output.WriteString(220, field_names[25], Name);
      }
      if (hasAutoInstall) {
        output.WriteBool(223, field_names[4], AutoInstall);
      }
      if (hasWifiAutodownload) {
        output.WriteBool(225, field_names[38], WifiAutodownload);
      }
      if (hasForceDownload) {
        output.WriteBool(226, field_names[16], ForceDownload);
      }
      if (hasShowProgress) {
        output.WriteBool(227, field_names[30], ShowProgress);
      }
      if (hasPost) {
        output.WriteString(241, field_names[27], Post);
      }
      if (hasHeaders) {
        output.WriteString(242, field_names[18], Headers);
      }
      if (hasGroupable) {
        output.WriteBool(260, field_names[17], Groupable);
      }
      if (hasMmsTitle) {
        output.WriteString(280, field_names[23], MmsTitle);
      }
      if (hasMmsURL) {
        output.WriteString(281, field_names[24], MmsURL);
      }
      if (hasPreload) {
        output.WriteBool(300, field_names[28], Preload);
      }
      if (hasTaskid) {
        output.WriteString(320, field_names[32], Taskid);
      }
      if (hasDuration) {
        output.WriteInt64(340, field_names[13], Duration);
      }
      if (hasDate) {
        output.WriteString(360, field_names[12], Date);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ActionId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasNext) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Next);
        }
        if (hasLogo) {
          size += pb::CodedOutputStream.ComputeStringSize(100, Logo);
        }
        if (hasLogoURL) {
          size += pb::CodedOutputStream.ComputeStringSize(101, LogoURL);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(102, Title);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(103, Text);
        }
        if (hasClearable) {
          size += pb::CodedOutputStream.ComputeBoolSize(104, Clearable);
        }
        if (hasRing) {
          size += pb::CodedOutputStream.ComputeBoolSize(105, Ring);
        }
        if (hasBuzz) {
          size += pb::CodedOutputStream.ComputeBoolSize(106, Buzz);
        }
        if (hasBannerURL) {
          size += pb::CodedOutputStream.ComputeStringSize(107, BannerURL);
        }
        if (hasImg) {
          size += pb::CodedOutputStream.ComputeStringSize(120, Img);
        }
        foreach (global::com.gexin.rp.sdk.dto.Button element in ButtonsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(121, element);
        }
        if (hasAppid) {
          size += pb::CodedOutputStream.ComputeStringSize(140, Appid);
        }
        if (hasAppstartupid) {
          size += pb::CodedOutputStream.ComputeMessageSize(141, Appstartupid);
        }
        if (hasAutostart) {
          size += pb::CodedOutputStream.ComputeBoolSize(142, Autostart);
        }
        if (hasFailedAction) {
          size += pb::CodedOutputStream.ComputeInt32Size(143, FailedAction);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(160, Url);
        }
        if (hasWithcid) {
          size += pb::CodedOutputStream.ComputeStringSize(161, Withcid);
        }
        if (hasIsWithnettype) {
          size += pb::CodedOutputStream.ComputeBoolSize(162, IsWithnettype);
        }
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(180, Address);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeStringSize(181, Content);
        }
        if (hasCt) {
          size += pb::CodedOutputStream.ComputeInt64Size(182, Ct);
        }
        if (hasFlag) {
          size += pb::CodedOutputStream.ComputeEnumSize(183, (int) Flag);
        }
        if (hasSuccessedAction) {
          size += pb::CodedOutputStream.ComputeInt32Size(200, SuccessedAction);
        }
        if (hasUninstalledAction) {
          size += pb::CodedOutputStream.ComputeInt32Size(201, UninstalledAction);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(220, Name);
        }
        if (hasAutoInstall) {
          size += pb::CodedOutputStream.ComputeBoolSize(223, AutoInstall);
        }
        if (hasWifiAutodownload) {
          size += pb::CodedOutputStream.ComputeBoolSize(225, WifiAutodownload);
        }
        if (hasForceDownload) {
          size += pb::CodedOutputStream.ComputeBoolSize(226, ForceDownload);
        }
        if (hasShowProgress) {
          size += pb::CodedOutputStream.ComputeBoolSize(227, ShowProgress);
        }
        if (hasPost) {
          size += pb::CodedOutputStream.ComputeStringSize(241, Post);
        }
        if (hasHeaders) {
          size += pb::CodedOutputStream.ComputeStringSize(242, Headers);
        }
        if (hasGroupable) {
          size += pb::CodedOutputStream.ComputeBoolSize(260, Groupable);
        }
        if (hasMmsTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(280, MmsTitle);
        }
        if (hasMmsURL) {
          size += pb::CodedOutputStream.ComputeStringSize(281, MmsURL);
        }
        if (hasPreload) {
          size += pb::CodedOutputStream.ComputeBoolSize(300, Preload);
        }
        if (hasTaskid) {
          size += pb::CodedOutputStream.ComputeStringSize(320, Taskid);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeInt64Size(340, Duration);
        }
        if (hasDate) {
          size += pb::CodedOutputStream.ComputeStringSize(360, Date);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ActionChain ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionChain ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionChain ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionChain ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionChain ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionChain ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionChain ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionChain ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionChain ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionChain ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionChain MakeReadOnly() {
      buttons_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionChain prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionChain, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionChain cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionChain result;
      
      private ActionChain PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionChain original = result;
          result = new ActionChain();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionChain MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.ActionChain.Descriptor; }
      }
      
      public override ActionChain DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.ActionChain.DefaultInstance; }
      }
      
      public override ActionChain BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionChain) {
          return MergeFrom((ActionChain) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionChain other) {
        if (other == global::com.gexin.rp.sdk.dto.ActionChain.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNext) {
          Next = other.Next;
        }
        if (other.HasLogo) {
          Logo = other.Logo;
        }
        if (other.HasLogoURL) {
          LogoURL = other.LogoURL;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasClearable) {
          Clearable = other.Clearable;
        }
        if (other.HasRing) {
          Ring = other.Ring;
        }
        if (other.HasBuzz) {
          Buzz = other.Buzz;
        }
        if (other.HasBannerURL) {
          BannerURL = other.BannerURL;
        }
        if (other.HasImg) {
          Img = other.Img;
        }
        if (other.buttons_.Count != 0) {
          result.buttons_.Add(other.buttons_);
        }
        if (other.HasAppid) {
          Appid = other.Appid;
        }
        if (other.HasAppstartupid) {
          MergeAppstartupid(other.Appstartupid);
        }
        if (other.HasAutostart) {
          Autostart = other.Autostart;
        }
        if (other.HasFailedAction) {
          FailedAction = other.FailedAction;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasWithcid) {
          Withcid = other.Withcid;
        }
        if (other.HasIsWithnettype) {
          IsWithnettype = other.IsWithnettype;
        }
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasCt) {
          Ct = other.Ct;
        }
        if (other.HasFlag) {
          Flag = other.Flag;
        }
        if (other.HasSuccessedAction) {
          SuccessedAction = other.SuccessedAction;
        }
        if (other.HasUninstalledAction) {
          UninstalledAction = other.UninstalledAction;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasAutoInstall) {
          AutoInstall = other.AutoInstall;
        }
        if (other.HasWifiAutodownload) {
          WifiAutodownload = other.WifiAutodownload;
        }
        if (other.HasForceDownload) {
          ForceDownload = other.ForceDownload;
        }
        if (other.HasShowProgress) {
          ShowProgress = other.ShowProgress;
        }
        if (other.HasPost) {
          Post = other.Post;
        }
        if (other.HasHeaders) {
          Headers = other.Headers;
        }
        if (other.HasGroupable) {
          Groupable = other.Groupable;
        }
        if (other.HasMmsTitle) {
          MmsTitle = other.MmsTitle;
        }
        if (other.HasMmsURL) {
          MmsURL = other.MmsURL;
        }
        if (other.HasPreload) {
          Preload = other.Preload;
        }
        if (other.HasTaskid) {
          Taskid = other.Taskid;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasDate) {
          Date = other.Date;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionChainFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionChainFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasActionId = input.ReadInt32(ref result.actionId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasNext = input.ReadInt32(ref result.next_);
              break;
            }
            case 802: {
              result.hasLogo = input.ReadString(ref result.logo_);
              break;
            }
            case 810: {
              result.hasLogoURL = input.ReadString(ref result.logoURL_);
              break;
            }
            case 818: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 826: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 832: {
              result.hasClearable = input.ReadBool(ref result.clearable_);
              break;
            }
            case 840: {
              result.hasRing = input.ReadBool(ref result.ring_);
              break;
            }
            case 848: {
              result.hasBuzz = input.ReadBool(ref result.buzz_);
              break;
            }
            case 858: {
              result.hasBannerURL = input.ReadString(ref result.bannerURL_);
              break;
            }
            case 962: {
              result.hasImg = input.ReadString(ref result.img_);
              break;
            }
            case 970: {
              input.ReadMessageArray(tag, field_name, result.buttons_, global::com.gexin.rp.sdk.dto.Button.DefaultInstance, extensionRegistry);
              break;
            }
            case 1122: {
              result.hasAppid = input.ReadString(ref result.appid_);
              break;
            }
            case 1130: {
              global::com.gexin.rp.sdk.dto.AppStartUp.Builder subBuilder = global::com.gexin.rp.sdk.dto.AppStartUp.CreateBuilder();
              if (result.hasAppstartupid) {
                subBuilder.MergeFrom(Appstartupid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Appstartupid = subBuilder.BuildPartial();
              break;
            }
            case 1136: {
              result.hasAutostart = input.ReadBool(ref result.autostart_);
              break;
            }
            case 1144: {
              result.hasFailedAction = input.ReadInt32(ref result.failedAction_);
              break;
            }
            case 1282: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 1290: {
              result.hasWithcid = input.ReadString(ref result.withcid_);
              break;
            }
            case 1296: {
              result.hasIsWithnettype = input.ReadBool(ref result.isWithnettype_);
              break;
            }
            case 1442: {
              result.hasAddress = input.ReadString(ref result.address_);
              break;
            }
            case 1450: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 1456: {
              result.hasCt = input.ReadInt64(ref result.ct_);
              break;
            }
            case 1464: {
              object unknown;
              if(input.ReadEnum(ref result.flag_, out unknown)) {
                result.hasFlag = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(183, (ulong)(int)unknown);
              }
              break;
            }
            case 1600: {
              result.hasSuccessedAction = input.ReadInt32(ref result.successedAction_);
              break;
            }
            case 1608: {
              result.hasUninstalledAction = input.ReadInt32(ref result.uninstalledAction_);
              break;
            }
            case 1762: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 1784: {
              result.hasAutoInstall = input.ReadBool(ref result.autoInstall_);
              break;
            }
            case 1800: {
              result.hasWifiAutodownload = input.ReadBool(ref result.wifiAutodownload_);
              break;
            }
            case 1808: {
              result.hasForceDownload = input.ReadBool(ref result.forceDownload_);
              break;
            }
            case 1816: {
              result.hasShowProgress = input.ReadBool(ref result.showProgress_);
              break;
            }
            case 1930: {
              result.hasPost = input.ReadString(ref result.post_);
              break;
            }
            case 1938: {
              result.hasHeaders = input.ReadString(ref result.headers_);
              break;
            }
            case 2080: {
              result.hasGroupable = input.ReadBool(ref result.groupable_);
              break;
            }
            case 2242: {
              result.hasMmsTitle = input.ReadString(ref result.mmsTitle_);
              break;
            }
            case 2250: {
              result.hasMmsURL = input.ReadString(ref result.mmsURL_);
              break;
            }
            case 2400: {
              result.hasPreload = input.ReadBool(ref result.preload_);
              break;
            }
            case 2562: {
              result.hasTaskid = input.ReadString(ref result.taskid_);
              break;
            }
            case 2720: {
              result.hasDuration = input.ReadInt64(ref result.duration_);
              break;
            }
            case 2882: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public int ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(int value) {
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::com.gexin.rp.sdk.dto.ActionChain.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::com.gexin.rp.sdk.dto.ActionChain.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::com.gexin.rp.sdk.dto.ActionChain.Types.Type.Goto;
        return this;
      }
      
      public bool HasNext {
        get { return result.hasNext; }
      }
      public int Next {
        get { return result.Next; }
        set { SetNext(value); }
      }
      public Builder SetNext(int value) {
        PrepareBuilder();
        result.hasNext = true;
        result.next_ = value;
        return this;
      }
      public Builder ClearNext() {
        PrepareBuilder();
        result.hasNext = false;
        result.next_ = 0;
        return this;
      }
      
      public bool HasLogo {
        get { return result.hasLogo; }
      }
      public string Logo {
        get { return result.Logo; }
        set { SetLogo(value); }
      }
      public Builder SetLogo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogo = true;
        result.logo_ = value;
        return this;
      }
      public Builder ClearLogo() {
        PrepareBuilder();
        result.hasLogo = false;
        result.logo_ = "";
        return this;
      }
      
      public bool HasLogoURL {
        get { return result.hasLogoURL; }
      }
      public string LogoURL {
        get { return result.LogoURL; }
        set { SetLogoURL(value); }
      }
      public Builder SetLogoURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogoURL = true;
        result.logoURL_ = value;
        return this;
      }
      public Builder ClearLogoURL() {
        PrepareBuilder();
        result.hasLogoURL = false;
        result.logoURL_ = "";
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasClearable {
        get { return result.hasClearable; }
      }
      public bool Clearable {
        get { return result.Clearable; }
        set { SetClearable(value); }
      }
      public Builder SetClearable(bool value) {
        PrepareBuilder();
        result.hasClearable = true;
        result.clearable_ = value;
        return this;
      }
      public Builder ClearClearable() {
        PrepareBuilder();
        result.hasClearable = false;
        result.clearable_ = false;
        return this;
      }
      
      public bool HasRing {
        get { return result.hasRing; }
      }
      public bool Ring {
        get { return result.Ring; }
        set { SetRing(value); }
      }
      public Builder SetRing(bool value) {
        PrepareBuilder();
        result.hasRing = true;
        result.ring_ = value;
        return this;
      }
      public Builder ClearRing() {
        PrepareBuilder();
        result.hasRing = false;
        result.ring_ = false;
        return this;
      }
      
      public bool HasBuzz {
        get { return result.hasBuzz; }
      }
      public bool Buzz {
        get { return result.Buzz; }
        set { SetBuzz(value); }
      }
      public Builder SetBuzz(bool value) {
        PrepareBuilder();
        result.hasBuzz = true;
        result.buzz_ = value;
        return this;
      }
      public Builder ClearBuzz() {
        PrepareBuilder();
        result.hasBuzz = false;
        result.buzz_ = false;
        return this;
      }
      
      public bool HasBannerURL {
        get { return result.hasBannerURL; }
      }
      public string BannerURL {
        get { return result.BannerURL; }
        set { SetBannerURL(value); }
      }
      public Builder SetBannerURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBannerURL = true;
        result.bannerURL_ = value;
        return this;
      }
      public Builder ClearBannerURL() {
        PrepareBuilder();
        result.hasBannerURL = false;
        result.bannerURL_ = "";
        return this;
      }
      
      public bool HasImg {
        get { return result.hasImg; }
      }
      public string Img {
        get { return result.Img; }
        set { SetImg(value); }
      }
      public Builder SetImg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImg = true;
        result.img_ = value;
        return this;
      }
      public Builder ClearImg() {
        PrepareBuilder();
        result.hasImg = false;
        result.img_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::com.gexin.rp.sdk.dto.Button> ButtonsList {
        get { return PrepareBuilder().buttons_; }
      }
      public int ButtonsCount {
        get { return result.ButtonsCount; }
      }
      public global::com.gexin.rp.sdk.dto.Button GetButtons(int index) {
        return result.GetButtons(index);
      }
      public Builder SetButtons(int index, global::com.gexin.rp.sdk.dto.Button value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buttons_[index] = value;
        return this;
      }
      public Builder SetButtons(int index, global::com.gexin.rp.sdk.dto.Button.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buttons_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddButtons(global::com.gexin.rp.sdk.dto.Button value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buttons_.Add(value);
        return this;
      }
      public Builder AddButtons(global::com.gexin.rp.sdk.dto.Button.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buttons_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeButtons(scg::IEnumerable<global::com.gexin.rp.sdk.dto.Button> values) {
        PrepareBuilder();
        result.buttons_.Add(values);
        return this;
      }
      public Builder ClearButtons() {
        PrepareBuilder();
        result.buttons_.Clear();
        return this;
      }
      
      public bool HasAppid {
        get { return result.hasAppid; }
      }
      public string Appid {
        get { return result.Appid; }
        set { SetAppid(value); }
      }
      public Builder SetAppid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppid = true;
        result.appid_ = value;
        return this;
      }
      public Builder ClearAppid() {
        PrepareBuilder();
        result.hasAppid = false;
        result.appid_ = "";
        return this;
      }
      
      public bool HasAppstartupid {
       get { return result.hasAppstartupid; }
      }
      public global::com.gexin.rp.sdk.dto.AppStartUp Appstartupid {
        get { return result.Appstartupid; }
        set { SetAppstartupid(value); }
      }
      public Builder SetAppstartupid(global::com.gexin.rp.sdk.dto.AppStartUp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppstartupid = true;
        result.appstartupid_ = value;
        return this;
      }
      public Builder SetAppstartupid(global::com.gexin.rp.sdk.dto.AppStartUp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAppstartupid = true;
        result.appstartupid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAppstartupid(global::com.gexin.rp.sdk.dto.AppStartUp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAppstartupid &&
            result.appstartupid_ != global::com.gexin.rp.sdk.dto.AppStartUp.DefaultInstance) {
            result.appstartupid_ = global::com.gexin.rp.sdk.dto.AppStartUp.CreateBuilder(result.appstartupid_).MergeFrom(value).BuildPartial();
        } else {
          result.appstartupid_ = value;
        }
        result.hasAppstartupid = true;
        return this;
      }
      public Builder ClearAppstartupid() {
        PrepareBuilder();
        result.hasAppstartupid = false;
        result.appstartupid_ = null;
        return this;
      }
      
      public bool HasAutostart {
        get { return result.hasAutostart; }
      }
      public bool Autostart {
        get { return result.Autostart; }
        set { SetAutostart(value); }
      }
      public Builder SetAutostart(bool value) {
        PrepareBuilder();
        result.hasAutostart = true;
        result.autostart_ = value;
        return this;
      }
      public Builder ClearAutostart() {
        PrepareBuilder();
        result.hasAutostart = false;
        result.autostart_ = false;
        return this;
      }
      
      public bool HasFailedAction {
        get { return result.hasFailedAction; }
      }
      public int FailedAction {
        get { return result.FailedAction; }
        set { SetFailedAction(value); }
      }
      public Builder SetFailedAction(int value) {
        PrepareBuilder();
        result.hasFailedAction = true;
        result.failedAction_ = value;
        return this;
      }
      public Builder ClearFailedAction() {
        PrepareBuilder();
        result.hasFailedAction = false;
        result.failedAction_ = 0;
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasWithcid {
        get { return result.hasWithcid; }
      }
      public string Withcid {
        get { return result.Withcid; }
        set { SetWithcid(value); }
      }
      public Builder SetWithcid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWithcid = true;
        result.withcid_ = value;
        return this;
      }
      public Builder ClearWithcid() {
        PrepareBuilder();
        result.hasWithcid = false;
        result.withcid_ = "";
        return this;
      }
      
      public bool HasIsWithnettype {
        get { return result.hasIsWithnettype; }
      }
      public bool IsWithnettype {
        get { return result.IsWithnettype; }
        set { SetIsWithnettype(value); }
      }
      public Builder SetIsWithnettype(bool value) {
        PrepareBuilder();
        result.hasIsWithnettype = true;
        result.isWithnettype_ = value;
        return this;
      }
      public Builder ClearIsWithnettype() {
        PrepareBuilder();
        result.hasIsWithnettype = false;
        result.isWithnettype_ = false;
        return this;
      }
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      public string Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasCt {
        get { return result.hasCt; }
      }
      public long Ct {
        get { return result.Ct; }
        set { SetCt(value); }
      }
      public Builder SetCt(long value) {
        PrepareBuilder();
        result.hasCt = true;
        result.ct_ = value;
        return this;
      }
      public Builder ClearCt() {
        PrepareBuilder();
        result.hasCt = false;
        result.ct_ = 0L;
        return this;
      }
      
      public bool HasFlag {
       get { return result.hasFlag; }
      }
      public global::com.gexin.rp.sdk.dto.SMSStatus Flag {
        get { return result.Flag; }
        set { SetFlag(value); }
      }
      public Builder SetFlag(global::com.gexin.rp.sdk.dto.SMSStatus value) {
        PrepareBuilder();
        result.hasFlag = true;
        result.flag_ = value;
        return this;
      }
      public Builder ClearFlag() {
        PrepareBuilder();
        result.hasFlag = false;
        result.flag_ = global::com.gexin.rp.sdk.dto.SMSStatus.unread;
        return this;
      }
      
      public bool HasSuccessedAction {
        get { return result.hasSuccessedAction; }
      }
      public int SuccessedAction {
        get { return result.SuccessedAction; }
        set { SetSuccessedAction(value); }
      }
      public Builder SetSuccessedAction(int value) {
        PrepareBuilder();
        result.hasSuccessedAction = true;
        result.successedAction_ = value;
        return this;
      }
      public Builder ClearSuccessedAction() {
        PrepareBuilder();
        result.hasSuccessedAction = false;
        result.successedAction_ = 0;
        return this;
      }
      
      public bool HasUninstalledAction {
        get { return result.hasUninstalledAction; }
      }
      public int UninstalledAction {
        get { return result.UninstalledAction; }
        set { SetUninstalledAction(value); }
      }
      public Builder SetUninstalledAction(int value) {
        PrepareBuilder();
        result.hasUninstalledAction = true;
        result.uninstalledAction_ = value;
        return this;
      }
      public Builder ClearUninstalledAction() {
        PrepareBuilder();
        result.hasUninstalledAction = false;
        result.uninstalledAction_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasAutoInstall {
        get { return result.hasAutoInstall; }
      }
      public bool AutoInstall {
        get { return result.AutoInstall; }
        set { SetAutoInstall(value); }
      }
      public Builder SetAutoInstall(bool value) {
        PrepareBuilder();
        result.hasAutoInstall = true;
        result.autoInstall_ = value;
        return this;
      }
      public Builder ClearAutoInstall() {
        PrepareBuilder();
        result.hasAutoInstall = false;
        result.autoInstall_ = false;
        return this;
      }
      
      public bool HasWifiAutodownload {
        get { return result.hasWifiAutodownload; }
      }
      public bool WifiAutodownload {
        get { return result.WifiAutodownload; }
        set { SetWifiAutodownload(value); }
      }
      public Builder SetWifiAutodownload(bool value) {
        PrepareBuilder();
        result.hasWifiAutodownload = true;
        result.wifiAutodownload_ = value;
        return this;
      }
      public Builder ClearWifiAutodownload() {
        PrepareBuilder();
        result.hasWifiAutodownload = false;
        result.wifiAutodownload_ = false;
        return this;
      }
      
      public bool HasForceDownload {
        get { return result.hasForceDownload; }
      }
      public bool ForceDownload {
        get { return result.ForceDownload; }
        set { SetForceDownload(value); }
      }
      public Builder SetForceDownload(bool value) {
        PrepareBuilder();
        result.hasForceDownload = true;
        result.forceDownload_ = value;
        return this;
      }
      public Builder ClearForceDownload() {
        PrepareBuilder();
        result.hasForceDownload = false;
        result.forceDownload_ = false;
        return this;
      }
      
      public bool HasShowProgress {
        get { return result.hasShowProgress; }
      }
      public bool ShowProgress {
        get { return result.ShowProgress; }
        set { SetShowProgress(value); }
      }
      public Builder SetShowProgress(bool value) {
        PrepareBuilder();
        result.hasShowProgress = true;
        result.showProgress_ = value;
        return this;
      }
      public Builder ClearShowProgress() {
        PrepareBuilder();
        result.hasShowProgress = false;
        result.showProgress_ = false;
        return this;
      }
      
      public bool HasPost {
        get { return result.hasPost; }
      }
      public string Post {
        get { return result.Post; }
        set { SetPost(value); }
      }
      public Builder SetPost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPost = true;
        result.post_ = value;
        return this;
      }
      public Builder ClearPost() {
        PrepareBuilder();
        result.hasPost = false;
        result.post_ = "";
        return this;
      }
      
      public bool HasHeaders {
        get { return result.hasHeaders; }
      }
      public string Headers {
        get { return result.Headers; }
        set { SetHeaders(value); }
      }
      public Builder SetHeaders(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeaders = true;
        result.headers_ = value;
        return this;
      }
      public Builder ClearHeaders() {
        PrepareBuilder();
        result.hasHeaders = false;
        result.headers_ = "";
        return this;
      }
      
      public bool HasGroupable {
        get { return result.hasGroupable; }
      }
      public bool Groupable {
        get { return result.Groupable; }
        set { SetGroupable(value); }
      }
      public Builder SetGroupable(bool value) {
        PrepareBuilder();
        result.hasGroupable = true;
        result.groupable_ = value;
        return this;
      }
      public Builder ClearGroupable() {
        PrepareBuilder();
        result.hasGroupable = false;
        result.groupable_ = false;
        return this;
      }
      
      public bool HasMmsTitle {
        get { return result.hasMmsTitle; }
      }
      public string MmsTitle {
        get { return result.MmsTitle; }
        set { SetMmsTitle(value); }
      }
      public Builder SetMmsTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMmsTitle = true;
        result.mmsTitle_ = value;
        return this;
      }
      public Builder ClearMmsTitle() {
        PrepareBuilder();
        result.hasMmsTitle = false;
        result.mmsTitle_ = "";
        return this;
      }
      
      public bool HasMmsURL {
        get { return result.hasMmsURL; }
      }
      public string MmsURL {
        get { return result.MmsURL; }
        set { SetMmsURL(value); }
      }
      public Builder SetMmsURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMmsURL = true;
        result.mmsURL_ = value;
        return this;
      }
      public Builder ClearMmsURL() {
        PrepareBuilder();
        result.hasMmsURL = false;
        result.mmsURL_ = "";
        return this;
      }
      
      public bool HasPreload {
        get { return result.hasPreload; }
      }
      public bool Preload {
        get { return result.Preload; }
        set { SetPreload(value); }
      }
      public Builder SetPreload(bool value) {
        PrepareBuilder();
        result.hasPreload = true;
        result.preload_ = value;
        return this;
      }
      public Builder ClearPreload() {
        PrepareBuilder();
        result.hasPreload = false;
        result.preload_ = false;
        return this;
      }
      
      public bool HasTaskid {
        get { return result.hasTaskid; }
      }
      public string Taskid {
        get { return result.Taskid; }
        set { SetTaskid(value); }
      }
      public Builder SetTaskid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskid = true;
        result.taskid_ = value;
        return this;
      }
      public Builder ClearTaskid() {
        PrepareBuilder();
        result.hasTaskid = false;
        result.taskid_ = "";
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public long Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(long value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0L;
        return this;
      }
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
    }
    static ActionChain() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AppStartUp : pb::GeneratedMessage<AppStartUp, AppStartUp.Builder> {
    private AppStartUp() { }
    private static readonly AppStartUp defaultInstance = new AppStartUp().MakeReadOnly();
    private static readonly string[] _appStartUpFieldNames = new string[] { "android", "ios", "symbia" };
    private static readonly uint[] _appStartUpFieldTags = new uint[] { 10, 26, 18 };
    public static AppStartUp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AppStartUp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AppStartUp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_AppStartUp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AppStartUp, AppStartUp.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_AppStartUp__FieldAccessorTable; }
    }
    
    public const int AndroidFieldNumber = 1;
    private bool hasAndroid;
    private string android_ = "";
    public bool HasAndroid {
      get { return hasAndroid; }
    }
    public string Android {
      get { return android_; }
    }
    
    public const int SymbiaFieldNumber = 2;
    private bool hasSymbia;
    private string symbia_ = "";
    public bool HasSymbia {
      get { return hasSymbia; }
    }
    public string Symbia {
      get { return symbia_; }
    }
    
    public const int IosFieldNumber = 3;
    private bool hasIos;
    private string ios_ = "";
    public bool HasIos {
      get { return hasIos; }
    }
    public string Ios {
      get { return ios_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _appStartUpFieldNames;
      if (hasAndroid) {
        output.WriteString(1, field_names[0], Android);
      }
      if (hasSymbia) {
        output.WriteString(2, field_names[2], Symbia);
      }
      if (hasIos) {
        output.WriteString(3, field_names[1], Ios);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAndroid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Android);
        }
        if (hasSymbia) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Symbia);
        }
        if (hasIos) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Ios);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AppStartUp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppStartUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppStartUp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppStartUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppStartUp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppStartUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AppStartUp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AppStartUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AppStartUp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppStartUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AppStartUp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AppStartUp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AppStartUp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AppStartUp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AppStartUp result;
      
      private AppStartUp PrepareBuilder() {
        if (resultIsReadOnly) {
          AppStartUp original = result;
          result = new AppStartUp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AppStartUp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.AppStartUp.Descriptor; }
      }
      
      public override AppStartUp DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.AppStartUp.DefaultInstance; }
      }
      
      public override AppStartUp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AppStartUp) {
          return MergeFrom((AppStartUp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AppStartUp other) {
        if (other == global::com.gexin.rp.sdk.dto.AppStartUp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAndroid) {
          Android = other.Android;
        }
        if (other.HasSymbia) {
          Symbia = other.Symbia;
        }
        if (other.HasIos) {
          Ios = other.Ios;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_appStartUpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _appStartUpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAndroid = input.ReadString(ref result.android_);
              break;
            }
            case 18: {
              result.hasSymbia = input.ReadString(ref result.symbia_);
              break;
            }
            case 26: {
              result.hasIos = input.ReadString(ref result.ios_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAndroid {
        get { return result.hasAndroid; }
      }
      public string Android {
        get { return result.Android; }
        set { SetAndroid(value); }
      }
      public Builder SetAndroid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAndroid = true;
        result.android_ = value;
        return this;
      }
      public Builder ClearAndroid() {
        PrepareBuilder();
        result.hasAndroid = false;
        result.android_ = "";
        return this;
      }
      
      public bool HasSymbia {
        get { return result.hasSymbia; }
      }
      public string Symbia {
        get { return result.Symbia; }
        set { SetSymbia(value); }
      }
      public Builder SetSymbia(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSymbia = true;
        result.symbia_ = value;
        return this;
      }
      public Builder ClearSymbia() {
        PrepareBuilder();
        result.hasSymbia = false;
        result.symbia_ = "";
        return this;
      }
      
      public bool HasIos {
        get { return result.hasIos; }
      }
      public string Ios {
        get { return result.Ios; }
        set { SetIos(value); }
      }
      public Builder SetIos(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIos = true;
        result.ios_ = value;
        return this;
      }
      public Builder ClearIos() {
        PrepareBuilder();
        result.hasIos = false;
        result.ios_ = "";
        return this;
      }
    }
    static AppStartUp() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Button : pb::GeneratedMessage<Button, Button.Builder> {
    private Button() { }
    private static readonly Button defaultInstance = new Button().MakeReadOnly();
    private static readonly string[] _buttonFieldNames = new string[] { "next", "text" };
    private static readonly uint[] _buttonFieldTags = new uint[] { 16, 10 };
    public static Button DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Button DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Button ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_Button__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Button, Button.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_Button__FieldAccessorTable; }
    }
    
    public const int TextFieldNumber = 1;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int NextFieldNumber = 2;
    private bool hasNext;
    private int next_;
    public bool HasNext {
      get { return hasNext; }
    }
    public int Next {
      get { return next_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _buttonFieldNames;
      if (hasText) {
        output.WriteString(1, field_names[1], Text);
      }
      if (hasNext) {
        output.WriteInt32(2, field_names[0], Next);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Text);
        }
        if (hasNext) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Next);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Button ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Button ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Button ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Button ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Button ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Button ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Button ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Button ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Button ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Button ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Button MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Button prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Button, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Button cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Button result;
      
      private Button PrepareBuilder() {
        if (resultIsReadOnly) {
          Button original = result;
          result = new Button();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Button MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.Button.Descriptor; }
      }
      
      public override Button DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.Button.DefaultInstance; }
      }
      
      public override Button BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Button) {
          return MergeFrom((Button) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Button other) {
        if (other == global::com.gexin.rp.sdk.dto.Button.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasNext) {
          Next = other.Next;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buttonFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buttonFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 16: {
              result.hasNext = input.ReadInt32(ref result.next_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasNext {
        get { return result.hasNext; }
      }
      public int Next {
        get { return result.Next; }
        set { SetNext(value); }
      }
      public Builder SetNext(int value) {
        PrepareBuilder();
        result.hasNext = true;
        result.next_ = value;
        return this;
      }
      public Builder ClearNext() {
        PrepareBuilder();
        result.hasNext = false;
        result.next_ = 0;
        return this;
      }
    }
    static Button() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Target : pb::GeneratedMessage<Target, Target.Builder> {
    private Target() { }
    private static readonly Target defaultInstance = new Target().MakeReadOnly();
    private static readonly string[] _targetFieldNames = new string[] { "appId", "clientId" };
    private static readonly uint[] _targetFieldTags = new uint[] { 10, 18 };
    public static Target DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Target DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Target ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_Target__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Target, Target.Builder> InternalFieldAccessors {
      get { return global::com.gexin.rp.sdk.dto.GtReq.internal__static_com_gexin_rp_sdk_dto_Target__FieldAccessorTable; }
    }
    
    public const int AppIdFieldNumber = 1;
    private bool hasAppId;
    private string appId_ = "";
    public bool HasAppId {
      get { return hasAppId; }
    }
    public string AppId {
      get { return appId_; }
    }
    
    public const int ClientIdFieldNumber = 2;
    private bool hasClientId;
    private string clientId_ = "";
    public bool HasClientId {
      get { return hasClientId; }
    }
    public string ClientId {
      get { return clientId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAppId) return false;
        if (!hasClientId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _targetFieldNames;
      if (hasAppId) {
        output.WriteString(1, field_names[0], AppId);
      }
      if (hasClientId) {
        output.WriteString(2, field_names[1], ClientId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAppId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AppId);
        }
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ClientId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Target ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Target ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Target ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Target ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Target ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Target ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Target ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Target ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Target ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Target ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Target MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Target prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Target, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Target cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Target result;
      
      private Target PrepareBuilder() {
        if (resultIsReadOnly) {
          Target original = result;
          result = new Target();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Target MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.gexin.rp.sdk.dto.Target.Descriptor; }
      }
      
      public override Target DefaultInstanceForType {
        get { return global::com.gexin.rp.sdk.dto.Target.DefaultInstance; }
      }
      
      public override Target BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Target) {
          return MergeFrom((Target) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Target other) {
        if (other == global::com.gexin.rp.sdk.dto.Target.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasClientId) {
          ClientId = other.ClientId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_targetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _targetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAppId = input.ReadString(ref result.appId_);
              break;
            }
            case 18: {
              result.hasClientId = input.ReadString(ref result.clientId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAppId {
        get { return result.hasAppId; }
      }
      public string AppId {
        get { return result.AppId; }
        set { SetAppId(value); }
      }
      public Builder SetAppId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppId = true;
        result.appId_ = value;
        return this;
      }
      public Builder ClearAppId() {
        PrepareBuilder();
        result.hasAppId = false;
        result.appId_ = "";
        return this;
      }
      
      public bool HasClientId {
        get { return result.hasClientId; }
      }
      public string ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = "";
        return this;
      }
    }
    static Target() {
      object.ReferenceEquals(global::com.gexin.rp.sdk.dto.GtReq.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
